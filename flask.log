 * Serving Flask app 'app'
 * Debug mode: off
INFO:werkzeug:[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on all addresses (0.0.0.0)
 * Running on http://127.0.0.1:5000
 * Running on http://10.25.20.172:5000
INFO:werkzeug:[33mPress CTRL+C to quit[0m
INFO:root:Received hhhh data: {'prompt': "The transcript of the video is: hey YouTube just in case you're new here\nmy name is YK and I was formerly a\nsoftware developer at Google and now I\nwork on this YouTube channel full time\nand welcome to my data structures and\nalgorithms series number one what are\ndata structures so a one sentence\ndescription of what data structures are\nwould be that there are basically\ndifferent ways of storing data on your\ncomputer and this sentence might not be\ntoo clear right now so let me give you a\nmore concrete example here let's say you\nwant to make a system that's sort of\nlike Google Maps for your neighborhood\nnow let's say your neighborhood looks\nlike this so your home is here and\nthere's a store here and another store\nhere and so on and there are some\nstreets too so these arrows show that\nthese are one-way streets there are a\nlot of one-way streets here and so for\nexample you can go from store to store B\nbut not the other way around and all the\nother lines here there are not arrows\nshow that they are two-way streets and\nlet's say that you already have each\nplace is coordinates there are latitudes\nand longitudes stored on your computer\nlike this as you can see from this table\nyou can tell that the latitude of home\nis forty-nine point two and the\nlongitude of home is minus one hundred\ntwenty three point four and so on now\nfrom this table like information you can\ntell where each location is exactly\nwhere each point is exactly but you\ncan't tell how these locations are\nconnected with streets and where the\nstreets are exactly so you need to\nfigure a way to store that information\nsomehow on your computer and there are\nactually a few different options for\nthis one of those options will be to\nstore all possible paths in a list like\nformat so for example one of those paths\nwill be from store a to home and another\none will be home to store a and yet\nanother path will be store a to store B\nand with that method your data might\nlook like this and from this list like\ninformation you can tell that as we saw\nearlier you can go from home to store a\nand from store a to home and home\nto store B and so on but you can't go\nfrom store B to home because this is a\none-way street and so there's no path\nfrom store B to home in this list okay\nso that's just one option another option\nmight be to list each of these places\nand for each of those places just list\nall the places you can go from that\nplace and with that method your data\nmight look like this instead as you can\nsee here we have table like information\nagain where on the left hand side we\nhave all the places listed home store a\nstore B school and then intersection\nthis one right here and on the right\nhand side for each of those places we\nhave all the places you can go from\nthere so from home you can go to store a\nstore B and intersection as you can see\nhere and from store a you can go to home\nor store B so these two methods are\nbasically two different ways of storing\nexactly the same set of data and as you\ncan see they have sort of different\nstructures and so these are simplified\nexamples of what data structures look\nlike now if you're already familiar with\ndata structures you might notice that\nthe first method corresponds to the\narray or a list data structure and the\nsecond method corresponds to the hash\ntable or hash map data structure okay so\nthat's one simple example of what data\nstructures are but this video series is\ncalled data structures and algorithms so\nwhat are algorithms one way to define\nwhat they are would be that there are\nthe operations we can perform on\ndifferent data structures and the sets\nof instructions for executing them so\none example here might be something like\nthis coming back to the previous example\nwe had let's say you want to find the\nshortest path from home to school so in\nthis problem by hand is pretty easy\npretty much right away you can see that\nthere are three potential paths from\nhome to school one of them is this one\njust go to store a store B and then\nschool another one is this one store B\nand this\ncool and another one the other one is\nfrom home to intersection to school and\nfor these three paths just compare the\ndistance that you need to travel for\neach of these paths and then pick the\nshortest one and to compute the distance\nthat you need to travel for each of\nthese paths you can for example use the\nlongitudes and latitudes the coordinates\nof each of these places and find the\ndistance in kilometers so solving this\nproblem by hand is pretty much trivial\nbut if you want to turn this into\nsomething a computer can understand you\nneed to be much more systematic about it\nso to make this strategy something a\ncomputer can understand easily you might\ncome up with a set of instructions like\nthis one first of all find all the\nplaces you can go from home so in this\nexample that's store a store B and then\nthe intersection and then from each of\nthose places find all the paths you can\ntake from that place so from store a you\ncan go to store B and from store B you\ncan go to school and from intersection\nyou can only go to school and as you go\nkeep track of the distance you've\ntraveled so far for each of those paths\nand keep repeating this process until\nyou get to the school then if you happen\nto find multiple paths that allows you\nto go from home to school then compare\nthe distance that you've traveled for\neach of those paths and finally find a\npath with the shortest distance traveled\nand then pick that as the shortest path\nokay so that's the result we were\nlooking for in the first place and this\nis a good example of what an algorithm\nis basically you have a problem you're\ngoing to solve in this case finding the\nshortest path from home to school and\nthen you have a set of systematic\ninstructions for solving that problem\nnow one thing to note here is that\ndepending on what data structure you're\nusing to store the data that you're\nperforming the algorithm on your\nalgorithm might look slightly\ndifferently you might even have in some\ncases completely different algorithms\nfor solving the same problem depending\non what data structure you're using\nin this particular example we talked\nabout two different options for storing\nthe information about where the streets\nare and how they connect different\nlocations the first option was to just\nlist all possible paths and remember\nthat the first step in our algorithm was\nto find all the possible places you can\ngo from home and to do that with the\nfirst stair structure this one right\nhere you might actually need to go\nthrough the entire list because in this\nparticular list we have three paths here\nfrom home but it's possible that we have\nanother path from home right here at the\nend of the list so you need to go\nthrough the entire list just in case on\nthe other hand if you use the second\ndata structure that we discussed we have\nall the possible places you can go from\nhome listed right here as a group so as\nsoon as we find the home row in this\ntable you won't need to go through the\nentire table anymore so in this\nparticular example using the second\nstructure actually makes it slightly\neasier to implement the algorithm that\nwe discussed now there are structures\nand algorithms are really important to\nlearn because they'll help you write\nefficient software as a software\ndeveloper so for example when I was\nworking at Microsoft as a data science\nintern I had to write this piece of code\nto retrieve some data and when I wrote\nit originally it was taking like seven\nto ten hours and basically it was too\nslow because we didn't want we didn't\nwant to wait that long so I rewrote it\nusing my knowledge of data structures\nand algorithms and after rewriting it\nthe new version only took like five to\nten minutes to load that data so that's\nwhy learning them is important and it's\nactually useful in many practical\nsituations that you might encounter as a\nsoftware developer - okay to give you an\neven better idea about what data\nstructures are like let me give you\nanother example here let's say you're\nhosting a party and you're expecting a\nbunch of people and this example is\ngonna be a little bit silly but just\nfollow along and you're gonna see why\nI'm talking about this particular\nexample anyway let's say that each\nperson\ncome to the party we'll bring sort of\nlike a small ball with them like a ball\nthat can fit in their hand and this ball\nwill have their name written on it so\nwhen David comes to the party he'll have\na ball with David written on it and when\nKevin arrives to the party he'll have a\nball with Kevin written on it and so on\nand this is just a silly little system\nthat you came up with for keeping track\nof who came to the party in which order\nbecause writing now each person's name\nwould be a lot of work you're just too\nbusy hosting a party so as someone who's\nstudying computer science let's say\nyou're trying to come up with an\nefficient system for storing these balls\nso that you can keep track of who came\nto the party one idea you have is this\none you get a very long box with 100\npartitions a lot of partitions and each\npartition let's say has exactly the same\nshape you know 10 centimeters by 10\ncentimeters let's say and every time\nsomeone comes to the party you're just\ngonna put that person's ball with their\nname written on it in the order they\ncame to the party so David's ball will\ncome in here and Kevin's will come in\nhere and so on and this is actually sort\nof like a data structure that's realized\nin real life and this actually\ncorresponds to the data structure called\narray in computer science and here's\nanother idea you have you get a bunch of\nboxes and this time instead of getting a\nlong box with many many partitions you\nwant to get individual boxes that are\nconnected with strings so the first box\nis connected to the second box with a\nstring and that's connected to the third\nbox with a string and so on and just\nlike before you want to put these tokens\nwith participants names written on them\nin these boxes just one by one in the\norder they came in so David's token will\ncome in here and Kevin's ball will come\nin here and so on and this sort of data\nstructure that's realized in real life\ncorresponds to the linked list data\nstructure in computer science okay so\nthe natural question here would be which\ndata structure\nuse for this party well it actually\ndepends because it highly depends on the\nparticular situation and the nature of\nthe party really and each data structure\nhas advantages and disadvantages okay\nthink about this situation let's say 100\npeople showed up to your party and\nyou're pretty happy about it but\nsuddenly you realize that the 98th\nperson is Paul had been misspelled that\nperson's name had been misspelled so you\nwant to fix that with the array data\nstructure it's actually pretty easy you\njust need to find the 98th partition and\nthat exact location can be calculated\neasily because you know that each\npartition is ten centimeters wide so you\njust need to find ten centimeters times\nninety seven actually which is nine\nhundred seventy centimeters so you just\nneed to walk over from the beginning\nnine hundred seventy centimeters and\nthen you can find the 98th person's\ntoken pretty easily you just need to\nreplace that with the correct token with\nthe link list data structure though\ndoing the same thing would be slightly\nmore tricky and that's because finding\nthe 98th person or finding the 98th box\nhere would be much harder and the reason\nfor that is because these strings are\npretty soft and they can be pretty much\nany lengths so each box can be in any\nlocation relative to the previous box so\nthis first box might be in the living\nroom and the second box might be in the\nkitchen and so on so to find in 98th box\nwhat you need to do is you need to count\nthem one by one so you need to say okay\nthis is the first box and then this is\nthe second box and let's find the third\nbox fourth and so on until you get to\nthe 98th person at this point you might\nsay well the array data structure is a\nbetter one then well not necessarily so\nthink about this situation let's say you\nhave 100 people showing up to the party\nand you're pretty happy about it but\nsuddenly five more people show up that\nyou didn't expect with the linked list\ndata structure it's pretty easy to deal\nwith that you can just\nadd five more boxes find five more boxes\nsomewhere and then five more strings and\njust add them to the last box you had in\nthe linked list data structure and then\nstore the five people's tokens in those\nboxes with the array data structure\nthough it's a little bit more tricky one\noption here would be to get another box\nwith let's say 100 partitions again and\nstore those people's tokens there and\nuse the two boxes together or you could\ndestroy the first box you had and then\nget a box with even more partitions\nlet's say 200 partitions and then\ntransfer all the balls you had for the\nfirst 100 people to the new box and then\nafter that add the additional five\npeople's tokens in the new box and in\ngeneral if you have no idea how many\npeople are coming to the party let's say\nanywhere between 5 to 1,000 people\nthe linked list data structure might be\nslightly more convenient than the array\nbecause linked lists are so much easier\nto resize than it is to resize a race ok\nand this was another simplified example\nof what data structures are like on a\ncomputer and this sort of gives you a\nrough idea about how to actually start\nthinking about them and throughout this\ncourse I'm going to introduce you to\neven more data structures and this time\nI'm going to explain them in a much more\ntechnical way using concepts like\nclasses objects memory and maybe even\nsome code snippets too now if you're\njust getting started with data\nstructures and algorithms one thing to\nkeep in mind that's actually really\nimportant is to apply what you've\nlearned through solving problems and the\nreason I say that is because it's so\ncommon for beginners to learn these\nconcepts and not actually be able to use\nthem in a real-world situation because\nthey haven't had enough practice and\nactually this video sponsor brilliant\norg has an interesting website for\nlearning these concepts in a sort of a\nnew way ok to show you what I mean let's\ntake a look at their computer science\nfundamentals course right\nhere which I would recommend for you\nguys and let's go into the intro to\nalgorithms section and you can see that\nit covers topics like arrays searching\ninsertion sort and Big O notation and in\nthe arrays section they have a bunch of\nexplanations about the topic and as you\ncontinue you'll give you a quiz to test\nyour understanding of the topic so it's\ndefinitely an interesting way to learn\ncomputer science concepts by solving\nproblems okay if you want to check it\nout for yourself just go to brilliant\norg slash CS no joke\nand going to this link will actually\nhelp support this channel and the first\n200 people will get 20% off the annual\nsubscription and actually I'm super\nexcited about this because they're the\nfirst sponsor I have on this YouTube\nchannel and I feel like I'm becoming a\nprofessional youtuber finally so thanks\nfor that brilliant ok as always I'm YK\nfrom CS dojo thanks for watching and\nI'll see you guys in the next video. Please acknowledge.", 'activeVideoUrl': 'https://www.youtube.com/watch?v=bum_19loj9A'}
INFO:root:Received hhhh data: {'prompt': "The transcript of the video is: hey YouTube just in case you're new here\nmy name is YK and I was formerly a\nsoftware developer at Google and now I\nwork on this YouTube channel full time\nand welcome to my data structures and\nalgorithms series number one what are\ndata structures so a one sentence\ndescription of what data structures are\nwould be that there are basically\ndifferent ways of storing data on your\ncomputer and this sentence might not be\ntoo clear right now so let me give you a\nmore concrete example here let's say you\nwant to make a system that's sort of\nlike Google Maps for your neighborhood\nnow let's say your neighborhood looks\nlike this so your home is here and\nthere's a store here and another store\nhere and so on and there are some\nstreets too so these arrows show that\nthese are one-way streets there are a\nlot of one-way streets here and so for\nexample you can go from store to store B\nbut not the other way around and all the\nother lines here there are not arrows\nshow that they are two-way streets and\nlet's say that you already have each\nplace is coordinates there are latitudes\nand longitudes stored on your computer\nlike this as you can see from this table\nyou can tell that the latitude of home\nis forty-nine point two and the\nlongitude of home is minus one hundred\ntwenty three point four and so on now\nfrom this table like information you can\ntell where each location is exactly\nwhere each point is exactly but you\ncan't tell how these locations are\nconnected with streets and where the\nstreets are exactly so you need to\nfigure a way to store that information\nsomehow on your computer and there are\nactually a few different options for\nthis one of those options will be to\nstore all possible paths in a list like\nformat so for example one of those paths\nwill be from store a to home and another\none will be home to store a and yet\nanother path will be store a to store B\nand with that method your data might\nlook like this and from this list like\ninformation you can tell that as we saw\nearlier you can go from home to store a\nand from store a to home and home\nto store B and so on but you can't go\nfrom store B to home because this is a\none-way street and so there's no path\nfrom store B to home in this list okay\nso that's just one option another option\nmight be to list each of these places\nand for each of those places just list\nall the places you can go from that\nplace and with that method your data\nmight look like this instead as you can\nsee here we have table like information\nagain where on the left hand side we\nhave all the places listed home store a\nstore B school and then intersection\nthis one right here and on the right\nhand side for each of those places we\nhave all the places you can go from\nthere so from home you can go to store a\nstore B and intersection as you can see\nhere and from store a you can go to home\nor store B so these two methods are\nbasically two different ways of storing\nexactly the same set of data and as you\ncan see they have sort of different\nstructures and so these are simplified\nexamples of what data structures look\nlike now if you're already familiar with\ndata structures you might notice that\nthe first method corresponds to the\narray or a list data structure and the\nsecond method corresponds to the hash\ntable or hash map data structure okay so\nthat's one simple example of what data\nstructures are but this video series is\ncalled data structures and algorithms so\nwhat are algorithms one way to define\nwhat they are would be that there are\nthe operations we can perform on\ndifferent data structures and the sets\nof instructions for executing them so\none example here might be something like\nthis coming back to the previous example\nwe had let's say you want to find the\nshortest path from home to school so in\nthis problem by hand is pretty easy\npretty much right away you can see that\nthere are three potential paths from\nhome to school one of them is this one\njust go to store a store B and then\nschool another one is this one store B\nand this\ncool and another one the other one is\nfrom home to intersection to school and\nfor these three paths just compare the\ndistance that you need to travel for\neach of these paths and then pick the\nshortest one and to compute the distance\nthat you need to travel for each of\nthese paths you can for example use the\nlongitudes and latitudes the coordinates\nof each of these places and find the\ndistance in kilometers so solving this\nproblem by hand is pretty much trivial\nbut if you want to turn this into\nsomething a computer can understand you\nneed to be much more systematic about it\nso to make this strategy something a\ncomputer can understand easily you might\ncome up with a set of instructions like\nthis one first of all find all the\nplaces you can go from home so in this\nexample that's store a store B and then\nthe intersection and then from each of\nthose places find all the paths you can\ntake from that place so from store a you\ncan go to store B and from store B you\ncan go to school and from intersection\nyou can only go to school and as you go\nkeep track of the distance you've\ntraveled so far for each of those paths\nand keep repeating this process until\nyou get to the school then if you happen\nto find multiple paths that allows you\nto go from home to school then compare\nthe distance that you've traveled for\neach of those paths and finally find a\npath with the shortest distance traveled\nand then pick that as the shortest path\nokay so that's the result we were\nlooking for in the first place and this\nis a good example of what an algorithm\nis basically you have a problem you're\ngoing to solve in this case finding the\nshortest path from home to school and\nthen you have a set of systematic\ninstructions for solving that problem\nnow one thing to note here is that\ndepending on what data structure you're\nusing to store the data that you're\nperforming the algorithm on your\nalgorithm might look slightly\ndifferently you might even have in some\ncases completely different algorithms\nfor solving the same problem depending\non what data structure you're using\nin this particular example we talked\nabout two different options for storing\nthe information about where the streets\nare and how they connect different\nlocations the first option was to just\nlist all possible paths and remember\nthat the first step in our algorithm was\nto find all the possible places you can\ngo from home and to do that with the\nfirst stair structure this one right\nhere you might actually need to go\nthrough the entire list because in this\nparticular list we have three paths here\nfrom home but it's possible that we have\nanother path from home right here at the\nend of the list so you need to go\nthrough the entire list just in case on\nthe other hand if you use the second\ndata structure that we discussed we have\nall the possible places you can go from\nhome listed right here as a group so as\nsoon as we find the home row in this\ntable you won't need to go through the\nentire table anymore so in this\nparticular example using the second\nstructure actually makes it slightly\neasier to implement the algorithm that\nwe discussed now there are structures\nand algorithms are really important to\nlearn because they'll help you write\nefficient software as a software\ndeveloper so for example when I was\nworking at Microsoft as a data science\nintern I had to write this piece of code\nto retrieve some data and when I wrote\nit originally it was taking like seven\nto ten hours and basically it was too\nslow because we didn't want we didn't\nwant to wait that long so I rewrote it\nusing my knowledge of data structures\nand algorithms and after rewriting it\nthe new version only took like five to\nten minutes to load that data so that's\nwhy learning them is important and it's\nactually useful in many practical\nsituations that you might encounter as a\nsoftware developer - okay to give you an\neven better idea about what data\nstructures are like let me give you\nanother example here let's say you're\nhosting a party and you're expecting a\nbunch of people and this example is\ngonna be a little bit silly but just\nfollow along and you're gonna see why\nI'm talking about this particular\nexample anyway let's say that each\nperson\ncome to the party we'll bring sort of\nlike a small ball with them like a ball\nthat can fit in their hand and this ball\nwill have their name written on it so\nwhen David comes to the party he'll have\na ball with David written on it and when\nKevin arrives to the party he'll have a\nball with Kevin written on it and so on\nand this is just a silly little system\nthat you came up with for keeping track\nof who came to the party in which order\nbecause writing now each person's name\nwould be a lot of work you're just too\nbusy hosting a party so as someone who's\nstudying computer science let's say\nyou're trying to come up with an\nefficient system for storing these balls\nso that you can keep track of who came\nto the party one idea you have is this\none you get a very long box with 100\npartitions a lot of partitions and each\npartition let's say has exactly the same\nshape you know 10 centimeters by 10\ncentimeters let's say and every time\nsomeone comes to the party you're just\ngonna put that person's ball with their\nname written on it in the order they\ncame to the party so David's ball will\ncome in here and Kevin's will come in\nhere and so on and this is actually sort\nof like a data structure that's realized\nin real life and this actually\ncorresponds to the data structure called\narray in computer science and here's\nanother idea you have you get a bunch of\nboxes and this time instead of getting a\nlong box with many many partitions you\nwant to get individual boxes that are\nconnected with strings so the first box\nis connected to the second box with a\nstring and that's connected to the third\nbox with a string and so on and just\nlike before you want to put these tokens\nwith participants names written on them\nin these boxes just one by one in the\norder they came in so David's token will\ncome in here and Kevin's ball will come\nin here and so on and this sort of data\nstructure that's realized in real life\ncorresponds to the linked list data\nstructure in computer science okay so\nthe natural question here would be which\ndata structure\nuse for this party well it actually\ndepends because it highly depends on the\nparticular situation and the nature of\nthe party really and each data structure\nhas advantages and disadvantages okay\nthink about this situation let's say 100\npeople showed up to your party and\nyou're pretty happy about it but\nsuddenly you realize that the 98th\nperson is Paul had been misspelled that\nperson's name had been misspelled so you\nwant to fix that with the array data\nstructure it's actually pretty easy you\njust need to find the 98th partition and\nthat exact location can be calculated\neasily because you know that each\npartition is ten centimeters wide so you\njust need to find ten centimeters times\nninety seven actually which is nine\nhundred seventy centimeters so you just\nneed to walk over from the beginning\nnine hundred seventy centimeters and\nthen you can find the 98th person's\ntoken pretty easily you just need to\nreplace that with the correct token with\nthe link list data structure though\ndoing the same thing would be slightly\nmore tricky and that's because finding\nthe 98th person or finding the 98th box\nhere would be much harder and the reason\nfor that is because these strings are\npretty soft and they can be pretty much\nany lengths so each box can be in any\nlocation relative to the previous box so\nthis first box might be in the living\nroom and the second box might be in the\nkitchen and so on so to find in 98th box\nwhat you need to do is you need to count\nthem one by one so you need to say okay\nthis is the first box and then this is\nthe second box and let's find the third\nbox fourth and so on until you get to\nthe 98th person at this point you might\nsay well the array data structure is a\nbetter one then well not necessarily so\nthink about this situation let's say you\nhave 100 people showing up to the party\nand you're pretty happy about it but\nsuddenly five more people show up that\nyou didn't expect with the linked list\ndata structure it's pretty easy to deal\nwith that you can just\nadd five more boxes find five more boxes\nsomewhere and then five more strings and\njust add them to the last box you had in\nthe linked list data structure and then\nstore the five people's tokens in those\nboxes with the array data structure\nthough it's a little bit more tricky one\noption here would be to get another box\nwith let's say 100 partitions again and\nstore those people's tokens there and\nuse the two boxes together or you could\ndestroy the first box you had and then\nget a box with even more partitions\nlet's say 200 partitions and then\ntransfer all the balls you had for the\nfirst 100 people to the new box and then\nafter that add the additional five\npeople's tokens in the new box and in\ngeneral if you have no idea how many\npeople are coming to the party let's say\nanywhere between 5 to 1,000 people\nthe linked list data structure might be\nslightly more convenient than the array\nbecause linked lists are so much easier\nto resize than it is to resize a race ok\nand this was another simplified example\nof what data structures are like on a\ncomputer and this sort of gives you a\nrough idea about how to actually start\nthinking about them and throughout this\ncourse I'm going to introduce you to\neven more data structures and this time\nI'm going to explain them in a much more\ntechnical way using concepts like\nclasses objects memory and maybe even\nsome code snippets too now if you're\njust getting started with data\nstructures and algorithms one thing to\nkeep in mind that's actually really\nimportant is to apply what you've\nlearned through solving problems and the\nreason I say that is because it's so\ncommon for beginners to learn these\nconcepts and not actually be able to use\nthem in a real-world situation because\nthey haven't had enough practice and\nactually this video sponsor brilliant\norg has an interesting website for\nlearning these concepts in a sort of a\nnew way ok to show you what I mean let's\ntake a look at their computer science\nfundamentals course right\nhere which I would recommend for you\nguys and let's go into the intro to\nalgorithms section and you can see that\nit covers topics like arrays searching\ninsertion sort and Big O notation and in\nthe arrays section they have a bunch of\nexplanations about the topic and as you\ncontinue you'll give you a quiz to test\nyour understanding of the topic so it's\ndefinitely an interesting way to learn\ncomputer science concepts by solving\nproblems okay if you want to check it\nout for yourself just go to brilliant\norg slash CS no joke\nand going to this link will actually\nhelp support this channel and the first\n200 people will get 20% off the annual\nsubscription and actually I'm super\nexcited about this because they're the\nfirst sponsor I have on this YouTube\nchannel and I feel like I'm becoming a\nprofessional youtuber finally so thanks\nfor that brilliant ok as always I'm YK\nfrom CS dojo thanks for watching and\nI'll see you guys in the next video. Please acknowledge.", 'activeVideoUrl': 'https://www.youtube.com/watch?v=bum_19loj9A'}
INFO:root:Active Video URL: https://www.youtube.com/watch?v=bum_19loj9A
INFO:root:Active Video URL: https://www.youtube.com/watch?v=bum_19loj9A
INFO:werkzeug:127.0.0.1 - - [04/Apr/2025 14:32:50] "POST /chat HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [04/Apr/2025 14:32:50] "POST /chat HTTP/1.1" 200 -
INFO:root:Received hhhh data: {'prompt': 'The transcript of the video is: [object Object]. Please acknowledge.', 'activeVideoUrl': 'https://www.youtube.com/watch?v=JXQ_lFGM0bg'}
INFO:root:Active Video URL: https://www.youtube.com/watch?v=JXQ_lFGM0bg
INFO:root:Received hhhh data: {'prompt': 'The transcript of the video is: [object Object]. Please acknowledge.', 'activeVideoUrl': 'https://www.youtube.com/watch?v=JXQ_lFGM0bg'}
INFO:root:Active Video URL: https://www.youtube.com/watch?v=JXQ_lFGM0bg
INFO:werkzeug:127.0.0.1 - - [04/Apr/2025 14:54:57] "POST /chat HTTP/1.1" 200 -
INFO:werkzeug:127.0.0.1 - - [04/Apr/2025 14:54:58] "POST /chat HTTP/1.1" 200 -
^C