   [1m[38;2;173;127;168m‚ñ≤ Next.js 15.1.0[39m[22m
   - Local:        http://localhost:3000
   - Network:      http://192.168.29.1:3000
   - Environments: .env.local
   - Experiments (use with caution):
     ¬∑ webpackBuildWorker
     ¬∑ parallelServerCompiles
     ¬∑ parallelServerBuildTraces

 [32m[1m‚úì[22m[39m Starting...
 [32m[1m‚úì[22m[39m Ready in 4s
 [32m[1m‚úì[22m[39m Compiled /middleware in 436ms
 [32m[1m‚úì[22m[39m Compiled (238 modules)
Path: /, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling / ...
Path: /, Session: true, Public: true
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 1/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 2/3...
The user aborted a request.

Retrying 3/3...
The user aborted a request.

Retrying 3/3...
The user aborted a request.

Retrying 3/3...
The user aborted a request.

Retrying 3/3...
The user aborted a request.

Retrying 3/3...
The user aborted a request.

Retrying 3/3...
The user aborted a request.

Retrying 3/3...
[Error [AbortError]: The user aborted a request.] {
  type: [32m'aborted'[39m,
  constructor: [36m[Function: AbortError][39m
}
 [31m[1m‚®Ø[22m[39m Failed to download `Inter` from Google Fonts. Using fallback font instead.

Failed to fetch `Inter` from Google Fonts.}
[Error [AbortError]: The user aborted a request.] {
  type: [32m'aborted'[39m,
  constructor: [36m[Function: AbortError][39m
}
[Error [AbortError]: The user aborted a request.] {
  type: [32m'aborted'[39m,
  constructor: [36m[Function: AbortError][39m
}
[Error [AbortError]: The user aborted a request.] {
  type: [32m'aborted'[39m,
  constructor: [36m[Function: AbortError][39m
}
[Error [AbortError]: The user aborted a request.] {
  type: [32m'aborted'[39m,
  constructor: [36m[Function: AbortError][39m
}
 [32m[1m‚úì[22m[39m Compiled / in 34.6s (1708 modules)
Path: /, Session: true, Public: true
 GET / [32m200[39m in 34790ms
 [32m[1m‚úì[22m[39m Compiled in 2.5s (828 modules)
 GET / [32m200[39m in 915ms
 [32m[1m‚úì[22m[39m Compiled in 989ms (828 modules)
 [32m[1m‚úì[22m[39m Compiled in 808ms (828 modules)
Path: /, Session: true, Public: true
 GET / [32m200[39m in 150ms
Path: /, Session: true, Public: true
 GET / [32m200[39m in 62ms
Path: /, Session: true, Public: true
 GET / [32m200[39m in 93ms
Path: /, Session: true, Public: true
 GET / [32m200[39m in 116ms
Path: /, Session: true, Public: true
 GET / [32m200[39m in 79ms
Path: /, Session: true, Public: true
 GET / [32m200[39m in 107ms
Path: /register, Session: true, Public: false
 [37m[1m‚óã[22m[39m Compiling /register ...
 [32m[1m‚úì[22m[39m Compiled /register in 2.7s (1696 modules)
 GET /register [32m200[39m in 2880ms
Path: /dashboard, Session: true, Public: false
 [37m[1m‚óã[22m[39m Compiling /dashboard ...
 [32m[1m‚úì[22m[39m Compiled /dashboard in 5.3s (1921 modules)
 GET /dashboard [32m200[39m in 5426ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 160ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/user, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling /api/roadmaps/user ...
 [32m[1m‚úì[22m[39m Compiled /api/roadmaps/user in 3.9s (1944 modules)
Fetching roadmaps from MongoDB...
Creating new MongoDB connection to: mongodb+srv://gauravkaushalye:84GP2fsw6SNbwnV7@cluster0.w23me.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /, Session: true, Public: true
Path: /dashboard, Session: true, Public: false
 GET / [32m200[39m in 320ms
 GET /dashboard [32m200[39m in 320ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 59ms
 POST /api/roadmaps/update-time [32m200[39m in 2489ms
 GET /api/roadmaps/update-time?userId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9&date=2025-04-05 [32m200[39m in 8855ms
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 8855ms
MongoDB connected successfully
MongoDB connected successfully
MongoDB connected successfully
Connected to MongoDB
‚ùå Error saving time: [Error: aborted] { code: [32m'ECONNRESET'[39m }
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 [32m[1m‚úì[22m[39m Compiled in 2.7s (943 modules)
 [32m[1m‚úì[22m[39m Compiled in 455ms (943 modules)
Path: /auth/callback, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling /auth/callback ...
 [32m[1m‚úì[22m[39m Compiled /auth/callback in 2.8s (2119 modules)
[Error: Route "/auth/callback" used `cookies().get('sb-wqewzenlruhorfotbreb-auth-token')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis]
[Error: Route "/auth/callback" used `cookies().get('sb-wqewzenlruhorfotbreb-auth-token-code-verifier')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis]
 [32m[1m‚úì[22m[39m Compiled in 723ms (943 modules)
 [32m[1m‚úì[22m[39m Compiled in 417ms (943 modules)
[Error: Route "/auth/callback" used `cookies().get('sb-wqewzenlruhorfotbreb-auth-token-code-verifier')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis]
[Error: Route "/auth/callback" used `cookies().set('sb-wqewzenlruhorfotbreb-auth-token-code-verifier', ...)`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis]
[Error: Route "/auth/callback" used `cookies().get('sb-wqewzenlruhorfotbreb-auth-token-code-verifier.0')`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis]
Error: Route "/auth/callback" used `cookies().set('sb-wqewzenlruhorfotbreb-auth-token', ...)`. `cookies()` should be awaited before using its value. Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis
    at Array.forEach (<anonymous>)
Auth callback: Code exchanged for session successfully
 GET /auth/callback?code=79ffa3b7-c5cc-4bfe-a730-d08b67ae59db [34m307[39m in 7686ms
 ‚îÇ [37mPOST https://wqewzenlruhorfotbreb.supabase.co/auth/v1/token?grant_type=pkce 200 in 4678ms [33m(cache skip)[37m[39m
 ‚îÇ ‚îÇ [90mCache skipped reason: ([37mrevalidate: 0[90m)[39m
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 268ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/user, Session: true, Public: true
Path: /dashboard, Session: true, Public: false
 [32m[1m‚úì[22m[39m Compiled /api/roadmaps/user in 222ms (1181 modules)
 [32m[1m‚úì[22m[39m Compiled (1183 modules)
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Using existing MongoDB connection
 GET /dashboard [32m200[39m in 555ms
 GET /api/roadmaps/update-time?userId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9&date=2025-04-05 [32m200[39m in 1570ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
 GET /api/roadmaps/update-time?userId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9&date=2025-04-05 [32m200[39m in 753ms
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 5234ms
Path: /api/roadmaps/user, Session: true, Public: true
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 2484ms
Path: /api/roadmaps/user, Session: true, Public: true
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 3979ms
 [32m[1m‚úì[22m[39m Compiled in 522ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 565ms
 [32m[1m‚úì[22m[39m Compiled in 848ms (943 modules)
Path: /dashboard, Session: true, Public: false
 [32m[1m‚úì[22m[39m Compiled in 546ms (943 modules)
 GET /dashboard [32m200[39m in 158ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 35ms
 [32m[1m‚úì[22m[39m Compiled in 349ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 49ms
 [32m[1m‚úì[22m[39m Compiled in 407ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 27ms
 [32m[1m‚úì[22m[39m Compiled in 361ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 25ms
 [32m[1m‚úì[22m[39m Compiled in 429ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 41ms
 [32m[1m‚úì[22m[39m Compiled in 408ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 23ms
 [32m[1m‚úì[22m[39m Compiled in 393ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 25ms
 [32m[1m‚úì[22m[39m Compiled in 431ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 34ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3540[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1192ms
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3540[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1194ms
 [32m[1m‚úì[22m[39m Compiled in 427ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 19ms
 [32m[1m‚úì[22m[39m Compiled in 331ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 19ms
 [32m[1m‚úì[22m[39m Compiled in 448ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 21ms
 [32m[1m‚úì[22m[39m Compiled in 367ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 33ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3562[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 2232ms
 [32m[1m‚úì[22m[39m Compiled in 598ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 33ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3566[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 883ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
 [32m[1m‚úì[22m[39m Compiled in 826ms (943 modules)
Path: /dashboard, Session: true, Public: false
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3566[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1327ms
 [32m[1m‚úì[22m[39m Compiled in 816ms (943 modules)
 GET /dashboard [32m200[39m in 227ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 46ms
 [32m[1m‚úì[22m[39m Compiled in 473ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 35ms
 [32m[1m‚úì[22m[39m Compiled in 292ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 20ms
 [32m[1m‚úì[22m[39m Compiled in 317ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 19ms
 [32m[1m‚úì[22m[39m Compiled in 345ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 26ms
 [32m[1m‚úì[22m[39m Compiled in 429ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 26ms
 [32m[1m‚úì[22m[39m Compiled in 318ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 30ms
Path: /dashboard, Session: true, Public: false
 [32m[1m‚úì[22m[39m Compiled in 1563ms (2177 modules)
 GET /dashboard [32m200[39m in 1386ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 24ms
Path: /dashboard, Session: true, Public: false
 [32m[1m‚úì[22m[39m Compiled in 1454ms (2177 modules)
 GET /dashboard [32m200[39m in 1223ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 22ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3592[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 2145ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3592[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 4947ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3592[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 2403ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3592[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 2168ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3593[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1457ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3593[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1245ms
 [32m[1m‚úì[22m[39m Compiled in 697ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 27ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3596[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1608ms
 [32m[1m‚úì[22m[39m Compiled in 398ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 23ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3600[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1534ms
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3600[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1537ms
 [32m[1m‚úì[22m[39m Compiled in 587ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 307ms
 [32m[1m‚úì[22m[39m Compiled in 352ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 24ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3603[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1397ms
 [32m[1m‚úì[22m[39m Compiled in 326ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 22ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3603[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1511ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
 [32m[1m‚úì[22m[39m Compiled in 772ms (943 modules)
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 32ms
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3606[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1708ms
Path: /dashboard, Session: true, Public: false
Path: /api/roadmaps/user, Session: true, Public: true
 GET /dashboard [32m200[39m in 87ms
 [37m[1m‚óã[22m[39m Compiling /api/roadmaps/user ...
 [32m[1m‚úì[22m[39m Compiled /api/roadmaps/user in 1358ms (1009 modules)
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 17758ms
Path: /dashboard/leaderboard, Session: true, Public: false
 [37m[1m‚óã[22m[39m Compiling /dashboard/leaderboard ...
 [32m[1m‚úì[22m[39m Compiled /dashboard/leaderboard in 2.4s (1956 modules)
 GET /dashboard/leaderboard [32m200[39m in 2998ms
Path: /api/leaderboard, Session: true, Public: true
Path: /api/leaderboard, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling /api/leaderboard ...
 [32m[1m‚úì[22m[39m Compiled /api/leaderboard in 1231ms (1959 modules)
Using existing MongoDB connection
Using existing MongoDB connection
Connected to database
Connected to database
Found entries: [33m3[39m
Returning updated entries: [33m3[39m
 GET /api/leaderboard [32m200[39m in 4450ms
Found entries: [33m3[39m
Path: /api/leaderboard, Session: true, Public: true
Using existing MongoDB connection
Connected to database
Found entries: [33m3[39m
Returning updated entries: [33m3[39m
 GET /api/leaderboard [32m200[39m in 5119ms
Returning updated entries: [33m3[39m
 GET /api/leaderboard [32m200[39m in 188ms
Path: /dashboard, Session: true, Public: false
 GET /dashboard [32m200[39m in 91ms
Path: /api/roadmaps/user, Session: true, Public: true
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 601ms
Path: /api/roadmaps/user, Session: true, Public: true
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 414ms
Path: /dashboard/weeklyprogress, Session: true, Public: false
 [37m[1m‚óã[22m[39m Compiling /dashboard/weeklyprogress ...
Path: /dashboard/roadmap/1bce0c30-3b07-4ac4-b72e-b5c57a2f6779, Session: true, Public: false
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /dashboard, Session: true, Public: false
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/update-time, Session: true, Public: true
 [32m[1m‚úì[22m[39m Compiled /dashboard/roadmap/[id] in 37.3s (3659 modules)
Using existing MongoDB connection
Using existing MongoDB connection
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3660[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 25481ms
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3660[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 25488ms
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3656[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 27925ms
 [33m[1m‚ö†[22m[39m Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
 GET /dashboard/roadmap/1bce0c30-3b07-4ac4-b72e-b5c57a2f6779 [32m200[39m in 28194ms
 GET /dashboard/weeklyprogress [32m200[39m in 37850ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /dashboard/weeklyprogress, Session: true, Public: false
 GET /dashboard [32m200[39m in 28079ms
Path: /dashboard, Session: true, Public: false
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/user, Session: true, Public: true
 GET /dashboard [32m200[39m in 33ms
Using existing MongoDB connection
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Path: /dashboard, Session: true, Public: false
 GET /api/roadmaps/update-time?userId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9&date=2025-04-05 [32m200[39m in 66ms
Path: /api/roadmaps/update-time, Session: true, Public: true
 GET /dashboard [32m200[39m in 37ms
Using existing MongoDB connection
 GET /api/roadmaps/update-time?userId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9&date=2025-04-05 [32m200[39m in 110ms
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 889ms
Path: /api/roadmaps/user, Session: true, Public: true
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 1563ms
Path: /api/roadmaps/user, Session: true, Public: true
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Path: /dashboard/roadmap/1bce0c30-3b07-4ac4-b72e-b5c57a2f6779, Session: true, Public: false
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
 GET /dashboard/roadmap/1bce0c30-3b07-4ac4-b72e-b5c57a2f6779 [32m200[39m in 59ms
Path: /api/roadmaps/get, Session: true, Public: true
Path: /api/roadmaps/update-time, Session: true, Public: true
Path: /api/roadmaps/update-time, Session: true, Public: true
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 1569ms
Path: /api/roadmaps/user, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling /api/roadmaps/get ...
 [32m[1m‚úì[22m[39m Compiled /api/roadmaps/get in 1140ms (3647 modules)
Using existing MongoDB connection
Using existing MongoDB connection
Fetching roadmaps from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Fetching roadmap from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3660[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1779ms
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3660[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 1781ms
Found roadmap with ID 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Fetching progress for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found 5 roadmaps for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found user progress: {
  _id: new ObjectId([32m'67ec194f9c219f154da544c7'[39m),
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  completedTopics: [],
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  lastUpdated: [35m2025-04-05T17:45:17.179Z[39m
}
 GET /api/roadmaps/get?roadmapId=1bce0c30-3b07-4ac4-b72e-b5c57a2f6779&supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 2914ms
Path: /api/roadmaps/get, Session: true, Public: true
Fetching roadmap from MongoDB...
Using existing MongoDB connection
Connected to MongoDB
Path: /api/transcript, Session: true, Public: true
Found progress data for 2 roadmaps
 GET /api/roadmaps/user?supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 2757ms
 [37m[1m‚óã[22m[39m Compiling /api/transcript ...
 [32m[1m‚úì[22m[39m Compiled /api/transcript in 613ms (3650 modules)
‚úÖ Request received
üìå Video URL: https://www.youtube.com/watch?v=bum_19loj9A
üìå Video ID: bum_19loj9A
üìÇ Script Path: C:\Users\gaura\Desktop\dyp\DevClash-Ascend\scripts\get_transcript.py
Found roadmap with ID 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Fetching progress for user bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9
Found user progress: {
  _id: new ObjectId([32m'67ec194f9c219f154da544c7'[39m),
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  completedTopics: [],
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  lastUpdated: [35m2025-04-05T17:45:17.179Z[39m
}
 GET /api/roadmaps/get?roadmapId=1bce0c30-3b07-4ac4-b72e-b5c57a2f6779&supabaseUserId=bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9 [32m200[39m in 1720ms
Path: /api/roadmaps/progress, Session: true, Public: true
üìÑ stdout: "hey YouTube just in case you're new here\nmy name is YK and I was formerly a\nsoftware developer at Google and now I\nwork on this YouTube channel full time\nand welcome to my data structures and\nalgorithms series number one what are\ndata structures so a one sentence\ndescription of what data structures are\nwould be that there are basically\ndifferent ways of storing data on your\ncomputer and this sentence might not be\ntoo clear right now so let me give you a\nmore concrete example here let's say you\nwant to make a system that's sort of\nlike Google Maps for your neighborhood\nnow let's say your neighborhood looks\nlike this so your home is here and\nthere's a store here and another store\nhere and so on and there are some\nstreets too so these arrows show that\nthese are one-way streets there are a\nlot of one-way streets here and so for\nexample you can go from store to store B\nbut not the other way around and all the\nother lines here there are not arrows\nshow that they are two-way streets and\nlet's say that you already have each\nplace is coordinates there are latitudes\nand longitudes stored on your computer\nlike this as you can see from this table\nyou can tell that the latitude of home\nis forty-nine point two and the\nlongitude of home is minus one hundred\ntwenty three point four and so on now\nfrom this table like information you can\ntell where each location is exactly\nwhere each point is exactly but you\ncan't tell how these locations are\nconnected with streets and where the\nstreets are exactly so you need to\nfigure a way to store that information\nsomehow on your computer and there are\nactually a few different options for\nthis one of those options will be to\nstore all possible paths in a list like\nformat so for example one of those paths\nwill be from store a to home and another\none will be home to store a and yet\nanother path will be store a to store B\nand with that method your data might\nlook like this and from this list like\ninformation you can tell that as we saw\nearlier you can go from home to store a\nand from store a to home and home\nto store B and so on but you can't go\nfrom store B to home because this is a\none-way street and so there's no path\nfrom store B to home in this list okay\nso that's just one option another option\nmight be to list each of these places\nand for each of those places just list\nall the places you can go from that\nplace and with that method your data\nmight look like this instead as you can\nsee here we have table like information\nagain where on the left hand side we\nhave all the places listed home store a\nstore B school and then intersection\nthis one right here and on the right\nhand side for each of those places we\nhave all the places you can go from\nthere so from home you can go to store a\nstore B and intersection as you can see\nhere and from store a you can go to home\nor store B so these two methods are\nbasically two different ways of storing\nexactly the same set of data and as you\ncan see they have sort of different\nstructures and so these are simplified\nexamples of what data structures look\nlike now if you're already familiar with\ndata structures you might notice that\nthe first method corresponds to the\narray or a list data structure and the\nsecond method corresponds to the hash\ntable or hash map data structure okay so\nthat's one simple example of what data\nstructures are but this video series is\ncalled data structures and algorithms so\nwhat are algorithms one way to define\nwhat they are would be that there are\nthe operations we can perform on\ndifferent data structures and the sets\nof instructions for executing them so\none example here might be something like\nthis coming back to the previous example\nwe had let's say you want to find the\nshortest path from home to school so in\nthis problem by hand is pretty easy\npretty much right away you can see that\nthere are three potential paths from\nhome to school one of them is this one\njust go to store a store B and then\nschool another one is this one store B\nand this\ncool and another one the other one is\nfrom home to intersection to school and\nfor these three paths just compare the\ndistance that you need to travel for\neach of these paths and then pick the\nshortest one and to compute the distance\nthat you need to travel for each of\nthese paths you can for example use the\nlongitudes and latitudes the coordinates\nof each of these places and find the\ndistance in kilometers so solving this\nproblem by hand is pretty much trivial\nbut if you want to turn this into\nsomething a computer can understand you\nneed to be much more systematic about it\nso to make this strategy something a\ncomputer can understand easily you might\ncome up with a set of instructions like\nthis one first of all find all the\nplaces you can go from home so in this\nexample that's store a store B and then\nthe intersection and then from each of\nthose places find all the paths you can\ntake from that place so from store a you\ncan go to store B and from store B you\ncan go to school and from intersection\nyou can only go to school and as you go\nkeep track of the distance you've\ntraveled so far for each of those paths\nand keep repeating this process until\nyou get to the school then if you happen\nto find multiple paths that allows you\nto go from home to school then compare\nthe distance that you've traveled for\neach of those paths and finally find a\npath with the shortest distance traveled\nand then pick that as the shortest path\nokay so that's the result we were\nlooking for in the first place and this\nis a good example of what an algorithm\nis basically you have a problem you're\ngoing to solve in this case finding the\nshortest path from home to school and\nthen you have a set of systematic\ninstructions for solving that problem\nnow one thing to note here is that\ndepending on what data structure you're\nusing to store the data that you're\nperforming the algorithm on your\nalgorithm might look slightly\ndifferently you might even have in some\ncases completely different algorithms\nfor solving the same problem depending\non what data structure you're using\nin this particular example we talked\nabout two different options for storing\nthe information about where the streets\nare and how they connect different\nlocations the first option was to just\nlist all possible paths and remember\nthat the first step in our algorithm was\nto find all the possible places you can\ngo from home and to do that with the\nfirst stair structure this one right\nhere you might actually need to go\nthrough the entire list because in this\nparticular list we have three paths here\nfrom home but it's possible that we have\nanother path from home right here at the\nend of the list so you need to go\nthrough the entire list just in case on\nthe other hand if you use the second\ndata structure that we discussed we have\nall the possible places you can go from\nhome listed right here as a group so as\nsoon as we find the home row in this\ntable you won't need to go through the\nentire table anymore so in this\nparticular example using the second\nstructure actually makes it slightly\neasier to implement the algorithm that\nwe discussed now there are structures\nand algorithms are really important to\nlearn because they'll help you write\nefficient software as a software\ndeveloper so for example when I was\nworking at Microsoft as a data science\nintern I had to write this piece of code\nto retrieve some data and when I wrote\nit originally it was taking like seven\nto ten hours and basically it was too\nslow because we didn't want we didn't\nwant to wait that long so I rewrote it\nusing my knowledge of data structures\nand algorithms and after rewriting it\nthe new version only took like five to\nten minutes to load that data so that's\nwhy learning them is important and it's\nactually useful in many practical\nsituations that you might encounter as a\nsoftware developer - okay to give you an\neven better idea about what data\nstructures are like let me give you\nanother example here let's say you're\nhosting a party and you're expecting a\nbunch of people and this example is\ngonna be a little bit silly but just\nfollow along and you're gonna see why\nI'm talking about this particular\nexample anyway let's say that each\nperson\ncome to the party we'll bring sort of\nlike a small ball with them like a ball\nthat can fit in their hand and this ball\nwill have their name written on it so\nwhen David comes to the party he'll have\na ball with David written on it and when\nKevin arrives to the party he'll have a\nball with Kevin written on it and so on\nand this is just a silly little system\nthat you came up with for keeping track\nof who came to the party in which order\nbecause writing now each person's name\nwould be a lot of work you're just too\nbusy hosting a party so as someone who's\nstudying computer science let's say\nyou're trying to come up with an\nefficient system for storing these balls\nso that you can keep track of who came\nto the party one idea you have is this\none you get a very long box with 100\npartitions a lot of partitions and each\npartition let's say has exactly the same\nshape you know 10 centimeters by 10\ncentimeters let's say and every time\nsomeone comes to the party you're just\ngonna put that person's ball with their\nname written on it in the order they\ncame to the party so David's ball will\ncome in here and Kevin's will come in\nhere and so on and this is actually sort\nof like a data structure that's realized\nin real life and this actually\ncorresponds to the data structure called\narray in computer science and here's\nanother idea you have you get a bunch of\nboxes and this time instead of getting a\nlong box with many many partitions you\nwant to get individual boxes that are\nconnected with strings so the first box\nis connected to the second box with a\nstring and that's connected to the third\nbox with a string and so on and just\nlike before you want to put these tokens\nwith participants names written on them\nin these boxes just one by one in the\norder they came in so David's token will\ncome in here and Kevin's ball will come\nin here and so on and this sort of data\nstructure that's realized in real life\ncorresponds to the linked list data\nstructure in computer science okay so\nthe natural question here would be which\ndata structure\nuse for this party well it actually\ndepends because it highly depends on the\nparticular situation and the nature of\nthe party really and each data structure\nhas advantages and disadvantages okay\nthink about this situation let's say 100\npeople showed up to your party and\nyou're pretty happy about it but\nsuddenly you realize that the 98th\nperson is Paul had been misspelled that\nperson's name had been misspelled so you\nwant to fix that with the array data\nstructure it's actually pretty easy you\njust need to find the 98th partition and\nthat exact location can be calculated\neasily because you know that each\npartition is ten centimeters wide so you\njust need to find ten centimeters times\nninety seven actually which is nine\nhundred seventy centimeters so you just\nneed to walk over from the beginning\nnine hundred seventy centimeters and\nthen you can find the 98th person's\ntoken pretty easily you just need to\nreplace that with the correct token with\nthe link list data structure though\ndoing the same thing would be slightly\nmore tricky and that's because finding\nthe 98th person or finding the 98th box\nhere would be much harder and the reason\nfor that is because these strings are\npretty soft and they can be pretty much\nany lengths so each box can be in any\nlocation relative to the previous box so\nthis first box might be in the living\nroom and the second box might be in the\nkitchen and so on so to find in 98th box\nwhat you need to do is you need to count\nthem one by one so you need to say okay\nthis is the first box and then this is\nthe second box and let's find the third\nbox fourth and so on until you get to\nthe 98th person at this point you might\nsay well the array data structure is a\nbetter one then well not necessarily so\nthink about this situation let's say you\nhave 100 people showing up to the party\nand you're pretty happy about it but\nsuddenly five more people show up that\nyou didn't expect with the linked list\ndata structure it's pretty easy to deal\nwith that you can just\nadd five more boxes find five more boxes\nsomewhere and then five more strings and\njust add them to the last box you had in\nthe linked list data structure and then\nstore the five people's tokens in those\nboxes with the array data structure\nthough it's a little bit more tricky one\noption here would be to get another box\nwith let's say 100 partitions again and\nstore those people's tokens there and\nuse the two boxes together or you could\ndestroy the first box you had and then\nget a box with even more partitions\nlet's say 200 partitions and then\ntransfer all the balls you had for the\nfirst 100 people to the new box and then\nafter that add the additional five\npeople's tokens in the new box and in\ngeneral if you have no idea how many\npeople are coming to the party let's say\nanywhere between 5 to 1,000 people\nthe linked list data structure might be\nslightly more convenient than the array\nbecause linked lists are so much easier\nto resize than it is to resize a race ok\nand this was another simplified example\nof what data structures are like on a\ncomputer and this sort of gives you a\nrough idea about how to actually start\nthinking about them and throughout this\ncourse I'm going to introduce you to\neven more data structures and this time\nI'm going to explain them in a much more\ntechnical way using concepts like\nclasses objects memory and maybe even\nsome code snippets too now if you're\njust getting started with data\nstructures and algorithms one thing to\nkeep in mind that's actually really\nimportant is to apply what you've\nlearned through solving problems and the\nreason I say that is because it's so\ncommon for beginners to learn these\nconcepts and not actually be able to use\nthem in a real-world situation because\nthey haven't had enough practice and\nactually this video sponsor brilliant\norg has an interesting website for\nlearning these concepts in a sort of a\nnew way ok to show you what I mean let's\ntake a look at their computer science\nfundamentals course right\nhere which I would recommend for you\nguys and let's go into the intro to\nalgorithms section and you can see that\nit covers topics like arrays searching\ninsertion sort and Big O notation and in\nthe arrays section they have a bunch of\nexplanations about the topic and as you\ncontinue you'll give you a quiz to test\nyour understanding of the topic so it's\ndefinitely an interesting way to learn\ncomputer science concepts by solving\nproblems okay if you want to check it\nout for yourself just go to brilliant\norg slash CS no joke\nand going to this link will actually\nhelp support this channel and the first\n200 people will get 20% off the annual\nsubscription and actually I'm super\nexcited about this because they're the\nfirst sponsor I have on this YouTube\nchannel and I feel like I'm becoming a\nprofessional youtuber finally so thanks\nfor that brilliant ok as always I'm YK\nfrom CS dojo thanks for watching and\nI'll see you guys in the next video"

 POST /api/transcript [32m200[39m in 4075ms
Path: /api/generateNotes, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling /api/generateNotes ...
 [32m[1m‚úì[22m[39m Compiled /api/generateNotes in 1450ms (3656 modules)
Starting generateResponseFromTranscript...
Prompt generated: Generate notes for the following transcript in points: hey YouTube just in case you're new here
my name is YK and I was formerly a
software developer at Google and now I
work on this YouTube channel full time
and welcome to my data structures and
algorithms series number one what are
data structures so a one sentence
description of what data structures are
would be that there are basically
different ways of storing data on your
computer and this sentence might not be
too clear right now so let me give you a
more concrete example here let's say you
want to make a system that's sort of
like Google Maps for your neighborhood
now let's say your neighborhood looks
like this so your home is here and
there's a store here and another store
here and so on and there are some
streets too so these arrows show that
these are one-way streets there are a
lot of one-way streets here and so for
example you can go from store to store B
but not the other way around and all the
other lines here there are not arrows
show that they are two-way streets and
let's say that you already have each
place is coordinates there are latitudes
and longitudes stored on your computer
like this as you can see from this table
you can tell that the latitude of home
is forty-nine point two and the
longitude of home is minus one hundred
twenty three point four and so on now
from this table like information you can
tell where each location is exactly
where each point is exactly but you
can't tell how these locations are
connected with streets and where the
streets are exactly so you need to
figure a way to store that information
somehow on your computer and there are
actually a few different options for
this one of those options will be to
store all possible paths in a list like
format so for example one of those paths
will be from store a to home and another
one will be home to store a and yet
another path will be store a to store B
and with that method your data might
look like this and from this list like
information you can tell that as we saw
earlier you can go from home to store a
and from store a to home and home
to store B and so on but you can't go
from store B to home because this is a
one-way street and so there's no path
from store B to home in this list okay
so that's just one option another option
might be to list each of these places
and for each of those places just list
all the places you can go from that
place and with that method your data
might look like this instead as you can
see here we have table like information
again where on the left hand side we
have all the places listed home store a
store B school and then intersection
this one right here and on the right
hand side for each of those places we
have all the places you can go from
there so from home you can go to store a
store B and intersection as you can see
here and from store a you can go to home
or store B so these two methods are
basically two different ways of storing
exactly the same set of data and as you
can see they have sort of different
structures and so these are simplified
examples of what data structures look
like now if you're already familiar with
data structures you might notice that
the first method corresponds to the
array or a list data structure and the
second method corresponds to the hash
table or hash map data structure okay so
that's one simple example of what data
structures are but this video series is
called data structures and algorithms so
what are algorithms one way to define
what they are would be that there are
the operations we can perform on
different data structures and the sets
of instructions for executing them so
one example here might be something like
this coming back to the previous example
we had let's say you want to find the
shortest path from home to school so in
this problem by hand is pretty easy
pretty much right away you can see that
there are three potential paths from
home to school one of them is this one
just go to store a store B and then
school another one is this one store B
and this
cool and another one the other one is
from home to intersection to school and
for these three paths just compare the
distance that you need to travel for
each of these paths and then pick the
shortest one and to compute the distance
that you need to travel for each of
these paths you can for example use the
longitudes and latitudes the coordinates
of each of these places and find the
distance in kilometers so solving this
problem by hand is pretty much trivial
but if you want to turn this into
something a computer can understand you
need to be much more systematic about it
so to make this strategy something a
computer can understand easily you might
come up with a set of instructions like
this one first of all find all the
places you can go from home so in this
example that's store a store B and then
the intersection and then from each of
those places find all the paths you can
take from that place so from store a you
can go to store B and from store B you
can go to school and from intersection
you can only go to school and as you go
keep track of the distance you've
traveled so far for each of those paths
and keep repeating this process until
you get to the school then if you happen
to find multiple paths that allows you
to go from home to school then compare
the distance that you've traveled for
each of those paths and finally find a
path with the shortest distance traveled
and then pick that as the shortest path
okay so that's the result we were
looking for in the first place and this
is a good example of what an algorithm
is basically you have a problem you're
going to solve in this case finding the
shortest path from home to school and
then you have a set of systematic
instructions for solving that problem
now one thing to note here is that
depending on what data structure you're
using to store the data that you're
performing the algorithm on your
algorithm might look slightly
differently you might even have in some
cases completely different algorithms
for solving the same problem depending
on what data structure you're using
in this particular example we talked
about two different options for storing
the information about where the streets
are and how they connect different
locations the first option was to just
list all possible paths and remember
that the first step in our algorithm was
to find all the possible places you can
go from home and to do that with the
first stair structure this one right
here you might actually need to go
through the entire list because in this
particular list we have three paths here
from home but it's possible that we have
another path from home right here at the
end of the list so you need to go
through the entire list just in case on
the other hand if you use the second
data structure that we discussed we have
all the possible places you can go from
home listed right here as a group so as
soon as we find the home row in this
table you won't need to go through the
entire table anymore so in this
particular example using the second
structure actually makes it slightly
easier to implement the algorithm that
we discussed now there are structures
and algorithms are really important to
learn because they'll help you write
efficient software as a software
developer so for example when I was
working at Microsoft as a data science
intern I had to write this piece of code
to retrieve some data and when I wrote
it originally it was taking like seven
to ten hours and basically it was too
slow because we didn't want we didn't
want to wait that long so I rewrote it
using my knowledge of data structures
and algorithms and after rewriting it
the new version only took like five to
ten minutes to load that data so that's
why learning them is important and it's
actually useful in many practical
situations that you might encounter as a
software developer - okay to give you an
even better idea about what data
structures are like let me give you
another example here let's say you're
hosting a party and you're expecting a
bunch of people and this example is
gonna be a little bit silly but just
follow along and you're gonna see why
I'm talking about this particular
example anyway let's say that each
person
come to the party we'll bring sort of
like a small ball with them like a ball
that can fit in their hand and this ball
will have their name written on it so
when David comes to the party he'll have
a ball with David written on it and when
Kevin arrives to the party he'll have a
ball with Kevin written on it and so on
and this is just a silly little system
that you came up with for keeping track
of who came to the party in which order
because writing now each person's name
would be a lot of work you're just too
busy hosting a party so as someone who's
studying computer science let's say
you're trying to come up with an
efficient system for storing these balls
so that you can keep track of who came
to the party one idea you have is this
one you get a very long box with 100
partitions a lot of partitions and each
partition let's say has exactly the same
shape you know 10 centimeters by 10
centimeters let's say and every time
someone comes to the party you're just
gonna put that person's ball with their
name written on it in the order they
came to the party so David's ball will
come in here and Kevin's will come in
here and so on and this is actually sort
of like a data structure that's realized
in real life and this actually
corresponds to the data structure called
array in computer science and here's
another idea you have you get a bunch of
boxes and this time instead of getting a
long box with many many partitions you
want to get individual boxes that are
connected with strings so the first box
is connected to the second box with a
string and that's connected to the third
box with a string and so on and just
like before you want to put these tokens
with participants names written on them
in these boxes just one by one in the
order they came in so David's token will
come in here and Kevin's ball will come
in here and so on and this sort of data
structure that's realized in real life
corresponds to the linked list data
structure in computer science okay so
the natural question here would be which
data structure
use for this party well it actually
depends because it highly depends on the
particular situation and the nature of
the party really and each data structure
has advantages and disadvantages okay
think about this situation let's say 100
people showed up to your party and
you're pretty happy about it but
suddenly you realize that the 98th
person is Paul had been misspelled that
person's name had been misspelled so you
want to fix that with the array data
structure it's actually pretty easy you
just need to find the 98th partition and
that exact location can be calculated
easily because you know that each
partition is ten centimeters wide so you
just need to find ten centimeters times
ninety seven actually which is nine
hundred seventy centimeters so you just
need to walk over from the beginning
nine hundred seventy centimeters and
then you can find the 98th person's
token pretty easily you just need to
replace that with the correct token with
the link list data structure though
doing the same thing would be slightly
more tricky and that's because finding
the 98th person or finding the 98th box
here would be much harder and the reason
for that is because these strings are
pretty soft and they can be pretty much
any lengths so each box can be in any
location relative to the previous box so
this first box might be in the living
room and the second box might be in the
kitchen and so on so to find in 98th box
what you need to do is you need to count
them one by one so you need to say okay
this is the first box and then this is
the second box and let's find the third
box fourth and so on until you get to
the 98th person at this point you might
say well the array data structure is a
better one then well not necessarily so
think about this situation let's say you
have 100 people showing up to the party
and you're pretty happy about it but
suddenly five more people show up that
you didn't expect with the linked list
data structure it's pretty easy to deal
with that you can just
add five more boxes find five more boxes
somewhere and then five more strings and
just add them to the last box you had in
the linked list data structure and then
store the five people's tokens in those
boxes with the array data structure
though it's a little bit more tricky one
option here would be to get another box
with let's say 100 partitions again and
store those people's tokens there and
use the two boxes together or you could
destroy the first box you had and then
get a box with even more partitions
let's say 200 partitions and then
transfer all the balls you had for the
first 100 people to the new box and then
after that add the additional five
people's tokens in the new box and in
general if you have no idea how many
people are coming to the party let's say
anywhere between 5 to 1,000 people
the linked list data structure might be
slightly more convenient than the array
because linked lists are so much easier
to resize than it is to resize a race ok
and this was another simplified example
of what data structures are like on a
computer and this sort of gives you a
rough idea about how to actually start
thinking about them and throughout this
course I'm going to introduce you to
even more data structures and this time
I'm going to explain them in a much more
technical way using concepts like
classes objects memory and maybe even
some code snippets too now if you're
just getting started with data
structures and algorithms one thing to
keep in mind that's actually really
important is to apply what you've
learned through solving problems and the
reason I say that is because it's so
common for beginners to learn these
concepts and not actually be able to use
them in a real-world situation because
they haven't had enough practice and
actually this video sponsor brilliant
org has an interesting website for
learning these concepts in a sort of a
new way ok to show you what I mean let's
take a look at their computer science
fundamentals course right
here which I would recommend for you
guys and let's go into the intro to
algorithms section and you can see that
it covers topics like arrays searching
insertion sort and Big O notation and in
the arrays section they have a bunch of
explanations about the topic and as you
continue you'll give you a quiz to test
your understanding of the topic so it's
definitely an interesting way to learn
computer science concepts by solving
problems okay if you want to check it
out for yourself just go to brilliant
org slash CS no joke
and going to this link will actually
help support this channel and the first
200 people will get 20% off the annual
subscription and actually I'm super
excited about this because they're the
first sponsor I have on this YouTube
channel and I feel like I'm becoming a
professional youtuber finally so thanks
for that brilliant ok as always I'm YK
from CS dojo thanks for watching and
I'll see you guys in the next video
Sending prompt to Gemini...
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:24.376Z[39m
}
Path: /api/transcript, Session: true, Public: true
‚úÖ Request received
üìå Video URL: https://www.youtube.com/watch?v=0OK-kbu9Cwo
üìå Video ID: 0OK-kbu9Cwo
üìÇ Script Path: C:\Users\gaura\Desktop\dyp\DevClash-Ascend\scripts\get_transcript.py
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 4015ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
üìÑ stdout: "in this video let's talk about arrays so\nlet's say you have bunch of values let's\nsay five values now instead of storing\nthem in five different variables we can\nstore that in one particular sequence\nright or one variable you can say now in\nthis array you can store five values so\nlet's say we have this array here and\nthen this will have a name to it now of\ncourse this data will be stored in a\nmemory right and every memory will have\nsomething called a memory location so\nlet's say we are storing this data in at\na location one zero one now what happens\nis every time you store a normal\nvariable let's say A Primitive type\nlet's say int and depend upon how much\nsizes take so every type will have a\ndifferent size to it depend upon a\nlanguage but let's say we have two bytes\nnow inside your memory let's say if you\ncreate a normal variable which is ain't\na equal to five now this particular a\nvariable will take some space in the\nmemory of course let's say two bytes and\nit will also have an address to it right\nso every time you in your programming\nlanguage you say hey I want a value for\na the program will jump to the memory\nlocation by searching for the address\nand it will get the value but the\nproblem is when it comes to array we\nhave multiple values right and we only\nhave one address now that's tricky of\ncourse each element here will take the\nsame size if you say ain't take two\nbytes the complete array will take 10\nbytes is because every element will take\ntwo bytes how will you allocate memory\nnow that's an issue so what you do is\nthe array will have a memory but that\nwill that is only pointing to the first\nlocation right so if you say the the\nmemory for this is one zero one the\nfirst element is one zero one what about\nthe second element now that's where we\nhave to use something called a index\nvalues so let's say the first element is\nlook is at one zero one so it will have\na index value which is zero the second\nelement is one then two then three then\nfour right now for five values the index\nvalue starts from 0 and ends at four now\ny 0 is because we're starting we have a\nmemory allocated right one zero one\nwhich is into the first element so we\ndon't have to give one to it so what you\ndo is this next element is plus 1 that's\nwhy one two three and then you can just\nget it right so one zero one let's say\nif you want to get the third element you\nhave to say plus two that's how you do\nit so you got the values you got the\nindex and you also got a memory address\nto it now with this array as you already\ntalked about ADT which is abstract data\ntype we should be able to perform some\noperations now what operation you can\nperform on this array now we can perform\nsomething called a read operation so\nwhat is reader so let's say you want to\nget the value of a index number three\nnow what what you do in this case is you\nsay okay my array name is nums and then\nfor this nums I want the value at index\nthree so in different languages we have\ndifferent representation for this but\nlet's say this is common one so nums\nbracket of three now what your computer\nwill do is it will directly jump to the\nmemory address it's very simple for the\nfor that right so you will say 1 0 1\nplus 3 you will get the value so that's\nhow you do it now doing is very easy and\ncomputer takes away less time to jump to\nthat particular area is because the\ncomputer knows the memory right because\nyou are mentioning the index value\nreading is good it's fast also what\nabout searching now this is tricky\nbecause when you're searching you're not\nsearching for the index you are\nbasically searching for the value now so\nlet's say from this area I want to\nsearch what is 17. now in this case your\ncomputer has no idea by 17 years because\ncompany only knows about the memory\naddress of course the values are there\nbut computer has no idea in which\nlocation we have that value and do we\neven have that value so what a computer\nwill do is it will start from the first\nlocation so basically you have to write\na code to search on the first location\nyou have to check is the first one 17 if\nyes good we can exit no then you have to\njump to the next location is it matching\nif yes good if not next matching yes no\nnext so basically you have to search\neach element right and let's say the\nelement is at the end you are searching\nyou are basically tracking to all the\ndifferent locations so this is time\nconsuming right what if you have a array\nof let's say thousand values so to move\nbetween this values it will take some\ntime what about inserting now this will\nbe tricky is because see if you want to\ninsert a element what do you think will\nit will it take a lot of time see if you\nwant to insert the element at the end\nthat's very simple you can get the size\nof the array because we also have to\nhave that option of getting a size of\nthe area right so let's say you have\nfive values you will simply jump to the\nsixth location which is index five\nand then you will say Okay I want to add\na value here let's say the value value\nis 21 and you can add the value it's\nit's very fast but what if you want to\nadd a value in between so let's say you\nwant to add that value at this second\nlocation so after the first you want to\nadd the new value now what you will do\nis you don't have a space there right\nyou can't simply create a new space you\ncan create space at the end so what you\ndo is you basically have to move all the\nelements and you it's not like you can\nsimply move the elements what you do is\ncreate a new block so move this second\nlast element now to the last block then\nagain you have to move every element one\nby one then you can add your value to\nthe second location so if you are\ninserting at the end that's fine but if\nyou're inserting in between that will\ntake a lot of time and that depends upon\nthe number of elements after the\nposition which you're adding what about\ndeleting see deleting from me from the\nend is always welcome is because you're\nnot affecting your array in total but\nwhat if you want to delete a particular\nelement from between in now you can\nsimply delete from the between right of\ndelete the end block but how will you\nmove so again when you have to do when\nyou want to delete this just replace all\nthe values right so that's that's tricky\nso it will take a lot of time depend\nupon how many elements you have after\nthat index value now while we are\ntalking about all this thing array was\nsimple right we can perform the\noperations the important thing here is\ntime taken for each operation and it's\nnot about CPU time if you're thinking uh\nmy computer is super fast it will be\nhappening very fast there see in the\nworld we have different computers and\ndifferent computer have different CPU\npower different Ram Power different\nconfiguration and that's why let's not\ncalculate a speed of our speed of a code\nor the algorithm by the actual runtime\nimportant is the number of steps it\ntakes example let's say if you want to\ninsert the element at the end that's\ngood if you want to insert the element\nin between that will take lot of steps\nis because you want to move the elements\nright now in the upcoming videos we're\ngoing to also talk about time complexity\nwhich is a very important concept\nsomething called big big or notation but\nyeah we'll talk about that in detail\nlater and I'm excited to hear that but\nimportant thing is when you write a code\nthink about the number of steps your\ncode takes because that defines your\ntime complexity and if you say my\nalgorithm is good it should be time\nefficient okay so for the same\nparticular operation you can write two\ndifferent codes example on the screen if\nyou want to print let's say 10 numbers\nfrom 1 to 10 and maybe you just want to\nprint the even numbers we have two\noptions there which one is good of\ncourse let me know in the comment\nsections but the code which is not\niterating between all the values is good\nright so that's how you define how your\nalgorithm is good now we can also expand\nthe other example let's say if you have\na sorted array so let's say you have an\narray and this is sorted by default so\nevery time you insert the element it\ngets sorted by by default you don't have\nto mention where you want to insert this\nexample let's say you have a bunch of\nvalues here all are sorted and now you\nwant to insert the element which is 11.\nnow if you want to insert 11 there where\nit will get inserted of course it will\nsearch for the location let's say we\nhave a number nine it will get inserted\nafter nine now the question is how do\nyour code knows where is nine so you\nhave to basically search you have to\nmatch is it greater than is it greater\nthan is it greater than and then you\nhave to insert so that will take a lot\nof time but what if you are inserting in\nbetween you have to shift all the\nelements so that's about the array and a\nbasic introduction of time complexity\nwe'll discuss that in detail later so I\nhope you enjoyed the video and in the\nupcoming videos we'll talk about more\nabout different data structures"

 POST /api/transcript [32m200[39m in 3842ms
Path: /api/generateNotes, Session: true, Public: true
Starting generateResponseFromTranscript...
Prompt generated: Generate notes for the following transcript in points: in this video let's talk about arrays so
let's say you have bunch of values let's
say five values now instead of storing
them in five different variables we can
store that in one particular sequence
right or one variable you can say now in
this array you can store five values so
let's say we have this array here and
then this will have a name to it now of
course this data will be stored in a
memory right and every memory will have
something called a memory location so
let's say we are storing this data in at
a location one zero one now what happens
is every time you store a normal
variable let's say A Primitive type
let's say int and depend upon how much
sizes take so every type will have a
different size to it depend upon a
language but let's say we have two bytes
now inside your memory let's say if you
create a normal variable which is ain't
a equal to five now this particular a
variable will take some space in the
memory of course let's say two bytes and
it will also have an address to it right
so every time you in your programming
language you say hey I want a value for
a the program will jump to the memory
location by searching for the address
and it will get the value but the
problem is when it comes to array we
have multiple values right and we only
have one address now that's tricky of
course each element here will take the
same size if you say ain't take two
bytes the complete array will take 10
bytes is because every element will take
two bytes how will you allocate memory
now that's an issue so what you do is
the array will have a memory but that
will that is only pointing to the first
location right so if you say the the
memory for this is one zero one the
first element is one zero one what about
the second element now that's where we
have to use something called a index
values so let's say the first element is
look is at one zero one so it will have
a index value which is zero the second
element is one then two then three then
four right now for five values the index
value starts from 0 and ends at four now
y 0 is because we're starting we have a
memory allocated right one zero one
which is into the first element so we
don't have to give one to it so what you
do is this next element is plus 1 that's
why one two three and then you can just
get it right so one zero one let's say
if you want to get the third element you
have to say plus two that's how you do
it so you got the values you got the
index and you also got a memory address
to it now with this array as you already
talked about ADT which is abstract data
type we should be able to perform some
operations now what operation you can
perform on this array now we can perform
something called a read operation so
what is reader so let's say you want to
get the value of a index number three
now what what you do in this case is you
say okay my array name is nums and then
for this nums I want the value at index
three so in different languages we have
different representation for this but
let's say this is common one so nums
bracket of three now what your computer
will do is it will directly jump to the
memory address it's very simple for the
for that right so you will say 1 0 1
plus 3 you will get the value so that's
how you do it now doing is very easy and
computer takes away less time to jump to
that particular area is because the
computer knows the memory right because
you are mentioning the index value
reading is good it's fast also what
about searching now this is tricky
because when you're searching you're not
searching for the index you are
basically searching for the value now so
let's say from this area I want to
search what is 17. now in this case your
computer has no idea by 17 years because
company only knows about the memory
address of course the values are there
but computer has no idea in which
location we have that value and do we
even have that value so what a computer
will do is it will start from the first
location so basically you have to write
a code to search on the first location
you have to check is the first one 17 if
yes good we can exit no then you have to
jump to the next location is it matching
if yes good if not next matching yes no
next so basically you have to search
each element right and let's say the
element is at the end you are searching
you are basically tracking to all the
different locations so this is time
consuming right what if you have a array
of let's say thousand values so to move
between this values it will take some
time what about inserting now this will
be tricky is because see if you want to
insert a element what do you think will
it will it take a lot of time see if you
want to insert the element at the end
that's very simple you can get the size
of the array because we also have to
have that option of getting a size of
the area right so let's say you have
five values you will simply jump to the
sixth location which is index five
and then you will say Okay I want to add
a value here let's say the value value
is 21 and you can add the value it's
it's very fast but what if you want to
add a value in between so let's say you
want to add that value at this second
location so after the first you want to
add the new value now what you will do
is you don't have a space there right
you can't simply create a new space you
can create space at the end so what you
do is you basically have to move all the
elements and you it's not like you can
simply move the elements what you do is
create a new block so move this second
last element now to the last block then
again you have to move every element one
by one then you can add your value to
the second location so if you are
inserting at the end that's fine but if
you're inserting in between that will
take a lot of time and that depends upon
the number of elements after the
position which you're adding what about
deleting see deleting from me from the
end is always welcome is because you're
not affecting your array in total but
what if you want to delete a particular
element from between in now you can
simply delete from the between right of
delete the end block but how will you
move so again when you have to do when
you want to delete this just replace all
the values right so that's that's tricky
so it will take a lot of time depend
upon how many elements you have after
that index value now while we are
talking about all this thing array was
simple right we can perform the
operations the important thing here is
time taken for each operation and it's
not about CPU time if you're thinking uh
my computer is super fast it will be
happening very fast there see in the
world we have different computers and
different computer have different CPU
power different Ram Power different
configuration and that's why let's not
calculate a speed of our speed of a code
or the algorithm by the actual runtime
important is the number of steps it
takes example let's say if you want to
insert the element at the end that's
good if you want to insert the element
in between that will take lot of steps
is because you want to move the elements
right now in the upcoming videos we're
going to also talk about time complexity
which is a very important concept
something called big big or notation but
yeah we'll talk about that in detail
later and I'm excited to hear that but
important thing is when you write a code
think about the number of steps your
code takes because that defines your
time complexity and if you say my
algorithm is good it should be time
efficient okay so for the same
particular operation you can write two
different codes example on the screen if
you want to print let's say 10 numbers
from 1 to 10 and maybe you just want to
print the even numbers we have two
options there which one is good of
course let me know in the comment
sections but the code which is not
iterating between all the values is good
right so that's how you define how your
algorithm is good now we can also expand
the other example let's say if you have
a sorted array so let's say you have an
array and this is sorted by default so
every time you insert the element it
gets sorted by by default you don't have
to mention where you want to insert this
example let's say you have a bunch of
values here all are sorted and now you
want to insert the element which is 11.
now if you want to insert 11 there where
it will get inserted of course it will
search for the location let's say we
have a number nine it will get inserted
after nine now the question is how do
your code knows where is nine so you
have to basically search you have to
match is it greater than is it greater
than is it greater than and then you
have to insert so that will take a lot
of time but what if you are inserting in
between you have to shift all the
elements so that's about the array and a
basic introduction of time complexity
we'll discuss that in detail later so I
hope you enjoyed the video and in the
upcoming videos we'll talk about more
about different data structures
Sending prompt to Gemini...
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:28.875Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 2528ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:32.620Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 385ms
Gemini response received.
Extracted response object.
Extracted response text: Here are the notes from the provided transcript, summarized in points:

**I. Introduction**

*   **YK:** Former Google software developer, now full-time YouTuber.
*   **Series:** Data Structures and Algorithms.
*   **Episode 1:** Introduction to Data Structures

**II. What are Data Structures?**

*   **Definition:** Different ways of storing data on your computer.
*   **Example:** Google Maps for your neighborhood.

    *   Neighborhood Map Example
        *   Locations: Home, Store A, Store B, School, Intersection
        *   Streets: One-way and two-way streets
        *   Coordinates: Latitude and Longitude stored.
    *   **Problem:** Need to store street connections, not just coordinates.

*   **Data Structure Option 1:** List of all possible paths.
    *   e.g., Store A to Home, Home to Store A, Store A to Store B.
    *   Can determine where you can go (e.g., Home to Store A)
    *   Also that you cannot go Store B to Home
    *   Corresponds to an **array** or **list**.

*   **Data Structure Option 2:** Table of places with places you can go from them.
    *   e.g., Home -> Store A, Store B, Intersection; Store A -> Home, Store B.
    *   Corresponds to a **hash table** or **hash map**.

*   **Key takeaway:** Different structures for storing the same data.

**III. What are Algorithms?**

*   **Definition:** Operations performed on data structures; set of instructions.
*   **Example:** Finding the shortest path from Home to School.

    *   **Problem:** Find the shortest path from home to school
    *   Possible paths:
        *   Home -> Store A -> Store B -> School
        *   Home -> Store B -> School
        *   Home -> Intersection -> School
    *   **Process (Algorithm):**
        1.  Find places you can go from home (Store A, Store B, Intersection).
        2.  From each of those places, find paths from that place (e.g., Store A -> Store B).
        3.  Track distance traveled.
        4.  Repeat until you reach the school.
        5.  Compare distances of multiple paths.
        6.  Choose the shortest path.

*   **Important Note:** Algorithm implementation can vary depending on the data structure used.

    *   Example: Finding places you can go from home
    *   First data structure would be a list of all possible paths
    *   Second data structure would be a table of places with possible places you can go from them

**IV. Why Learn Data Structures and Algorithms?**

*   **Efficiency:** Helps you write efficient software.
*   **Example:** Rewriting data science code at Microsoft.

    *   Original code: 7-10 hours.
    *   Rewritten code: 5-10 minutes.

**V. Party Example (Illustrating Data Structures)**

*   **Scenario:** Hosting a party, guests bring balls with their names.
*   **Need:** Efficient system for storing balls to keep track of attendance.

    *   **Real-Life Array Analogy:** Long box with partitions.
    *   **Real-Life Linked List Analogy:** Connected individual boxes with strings.

*   **Which to Use?** Depends on the situation; each has pros and cons.

    *   **Array Advantage:** Easy to access elements by index (e.g., find the 98th person).
    *   **Linked List Advantage:** Easy to resize (add more boxes).
    *   **Array Disadvantage:** Hard to resize.
    *   **Linked List Disadvantage:** Hard to access specific index (e.g. 98th person).

**VI. Course Outlook**

*   Will introduce more data structures in a technical way (classes, objects, memory, code).
*   **Important:** Apply what you learn through problem-solving.
*   **Sponsor:** Brilliant.org.

    *   Computer Science Fundamentals course.
    *   Interactive learning with explanations and quizzes.

**VII. Brilliant.org Promotion**

*   Brilliant.org/CS no joke
*   Supports the channel.
*   First 200 people get 20% off annual subscription.

**VIII. Outro**

*   YK from CS Dojo.
*   Thanks for watching.
*   See you in the next video.

generateResponseFromTranscript completed successfully.
Response from generateResponseFromTranscript: Here are the notes from the provided transcript, summarized in points:

**I. Introduction**

*   **YK:** Former Google software developer, now full-time YouTuber.
*   **Series:** Data Structures and Algorithms.
*   **Episode 1:** Introduction to Data Structures

**II. What are Data Structures?**

*   **Definition:** Different ways of storing data on your computer.
*   **Example:** Google Maps for your neighborhood.

    *   Neighborhood Map Example
        *   Locations: Home, Store A, Store B, School, Intersection
        *   Streets: One-way and two-way streets
        *   Coordinates: Latitude and Longitude stored.
    *   **Problem:** Need to store street connections, not just coordinates.

*   **Data Structure Option 1:** List of all possible paths.
    *   e.g., Store A to Home, Home to Store A, Store A to Store B.
    *   Can determine where you can go (e.g., Home to Store A)
    *   Also that you cannot go Store B to Home
    *   Corresponds to an **array** or **list**.

*   **Data Structure Option 2:** Table of places with places you can go from them.
    *   e.g., Home -> Store A, Store B, Intersection; Store A -> Home, Store B.
    *   Corresponds to a **hash table** or **hash map**.

*   **Key takeaway:** Different structures for storing the same data.

**III. What are Algorithms?**

*   **Definition:** Operations performed on data structures; set of instructions.
*   **Example:** Finding the shortest path from Home to School.

    *   **Problem:** Find the shortest path from home to school
    *   Possible paths:
        *   Home -> Store A -> Store B -> School
        *   Home -> Store B -> School
        *   Home -> Intersection -> School
    *   **Process (Algorithm):**
        1.  Find places you can go from home (Store A, Store B, Intersection).
        2.  From each of those places, find paths from that place (e.g., Store A -> Store B).
        3.  Track distance traveled.
        4.  Repeat until you reach the school.
        5.  Compare distances of multiple paths.
        6.  Choose the shortest path.

*   **Important Note:** Algorithm implementation can vary depending on the data structure used.

    *   Example: Finding places you can go from home
    *   First data structure would be a list of all possible paths
    *   Second data structure would be a table of places with possible places you can go from them

**IV. Why Learn Data Structures and Algorithms?**

*   **Efficiency:** Helps you write efficient software.
*   **Example:** Rewriting data science code at Microsoft.

    *   Original code: 7-10 hours.
    *   Rewritten code: 5-10 minutes.

**V. Party Example (Illustrating Data Structures)**

*   **Scenario:** Hosting a party, guests bring balls with their names.
*   **Need:** Efficient system for storing balls to keep track of attendance.

    *   **Real-Life Array Analogy:** Long box with partitions.
    *   **Real-Life Linked List Analogy:** Connected individual boxes with strings.

*   **Which to Use?** Depends on the situation; each has pros and cons.

    *   **Array Advantage:** Easy to access elements by index (e.g., find the 98th person).
    *   **Linked List Advantage:** Easy to resize (add more boxes).
    *   **Array Disadvantage:** Hard to resize.
    *   **Linked List Disadvantage:** Hard to access specific index (e.g. 98th person).

**VI. Course Outlook**

*   Will introduce more data structures in a technical way (classes, objects, memory, code).
*   **Important:** Apply what you learn through problem-solving.
*   **Sponsor:** Brilliant.org.

    *   Computer Science Fundamentals course.
    *   Interactive learning with explanations and quizzes.

**VII. Brilliant.org Promotion**

*   Brilliant.org/CS no joke
*   Supports the channel.
*   First 200 people get 20% off annual subscription.

**VIII. Outro**

*   YK from CS Dojo.
*   Thanks for watching.
*   See you in the next video.

 POST /api/generateNotes [32m200[39m in 10731ms
 ‚îÇ [37mPOST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent 200 in 9662ms [33m(cache skip)[37m[39m
 ‚îÇ ‚îÇ [90mCache skipped reason: ([37mauto no cache[90m)[39m
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:35.014Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 378ms
Path: /api/transcript, Session: true, Public: true
‚úÖ Request received
üìå Video URL: https://www.youtube.com/watch?v=eXFItikqw8c
üìå Video ID: eXFItikqw8c
üìÇ Script Path: C:\Users\gaura\Desktop\dyp\DevClash-Ascend\scripts\get_transcript.py
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Gemini response received.
Extracted response object.
Extracted response text: ## Array Notes from Transcript:

**1. Introduction to Arrays:**

*   Arrays store multiple values (e.g., five) in a single variable (sequence).
*   Values in the array are of the same data type (e.g., all `int`).
*   Arrays are stored in memory.

**2. Memory Allocation:**

*   Normal variables (e.g., `int a = 5`) are allocated a memory space with an address.
*   Arrays have multiple values but only one primary address pointing to the start of the array in memory.
*   Each element of the array takes up the same amount of memory (e.g., 2 bytes for each `int` element).

**3. Indexing:**

*   Elements within the array are accessed using index values.
*   Indexing starts at 0 (0, 1, 2, 3, 4 for an array of five elements).
*   Index `0` corresponds to the first element.

**4. Calculating Memory Address:**

*   The first element is at the base memory address of the array.
*   To find the memory address of subsequent elements, add the index to the base address.  For example, to get the 3rd element, you do the first element memory address + 2

**5. Array Operations (ADT - Abstract Data Type):**

*   **Read (Access):**
    *   Example: `nums[3]` accesses the element at index 3.
    *   Fast because the computer can directly calculate the memory address using the index.

*   **Search:**
    *   Searching for a *value* (e.g., 17) is slower.
    *   The computer has to iterate through each element of the array, starting from the beginning, to find the value.
    *   This process can be time-consuming, especially for large arrays.

*   **Insert:**
    *   Inserting at the end is fast (append).
    *   Inserting in the middle is slow.
    *   Requires shifting all subsequent elements to create space.

*   **Delete:**
    *   Deleting from the end is efficient.
    *   Deleting from the middle is slow.
    *   Requires shifting all subsequent elements to fill the gap.

**6. Time Complexity:**

*   Important factor to consider for array operations.
*   Focus on the *number of steps* an algorithm takes, not just CPU runtime.
*   Different computers have different processing speeds.
*   **Goal:** Time efficient algorithm.

**7. Example of algorithm efficiency**:
*  When printing even numbers from 1 to 10, iterating through all values is less efficient than directly printing the even numbers.

**8. Sorted Arrays:**

*   Elements are always sorted upon insertion.
*   Inserting a value requires searching for the correct position to maintain the sorted order.
*   May still require shifting elements to create space for the new value.

**9. Future Topics:**

*   Time complexity (Big O notation) will be discussed in detail in future videos.
*   More data structures will be explored.

generateResponseFromTranscript completed successfully.
Response from generateResponseFromTranscript: ## Array Notes from Transcript:

**1. Introduction to Arrays:**

*   Arrays store multiple values (e.g., five) in a single variable (sequence).
*   Values in the array are of the same data type (e.g., all `int`).
*   Arrays are stored in memory.

**2. Memory Allocation:**

*   Normal variables (e.g., `int a = 5`) are allocated a memory space with an address.
*   Arrays have multiple values but only one primary address pointing to the start of the array in memory.
*   Each element of the array takes up the same amount of memory (e.g., 2 bytes for each `int` element).

**3. Indexing:**

*   Elements within the array are accessed using index values.
*   Indexing starts at 0 (0, 1, 2, 3, 4 for an array of five elements).
*   Index `0` corresponds to the first element.

**4. Calculating Memory Address:**

*   The first element is at the base memory address of the array.
*   To find the memory address of subsequent elements, add the index to the base address.  For example, to get the 3rd element, you do the first element memory address + 2

**5. Array Operations (ADT - Abstract Data Type):**

*   **Read (Access):**
    *   Example: `nums[3]` accesses the element at index 3.
    *   Fast because the computer can directly calculate the memory address using the index.

*   **Search:**
    *   Searching for a *value* (e.g., 17) is slower.
    *   The computer has to iterate through each element of the array, starting from the beginning, to find the value.
    *   This process can be time-consuming, especially for large arrays.

*   **Insert:**
    *   Inserting at the end is fast (append).
    *   Inserting in the middle is slow.
    *   Requires shifting all subsequent elements to create space.

*   **Delete:**
    *   Deleting from the end is efficient.
    *   Deleting from the middle is slow.
    *   Requires shifting all subsequent elements to fill the gap.

**6. Time Complexity:**

*   Important factor to consider for array operations.
*   Focus on the *number of steps* an algorithm takes, not just CPU runtime.
*   Different computers have different processing speeds.
*   **Goal:** Time efficient algorithm.

**7. Example of algorithm efficiency**:
*  When printing even numbers from 1 to 10, iterating through all values is less efficient than directly printing the even numbers.

**8. Sorted Arrays:**

*   Elements are always sorted upon insertion.
*   Inserting a value requires searching for the correct position to maintain the sorted order.
*   May still require shifting elements to create space for the new value.

**9. Future Topics:**

*   Time complexity (Big O notation) will be discussed in detail in future videos.
*   More data structures will be explored.

 POST /api/generateNotes [32m200[39m in 8643ms
 ‚îÇ [37mPOST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent 200 in 8620ms [33m(cache skip)[37m[39m
 ‚îÇ ‚îÇ [90mCache skipped reason: ([37mauto no cache[90m)[39m
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:38.128Z[39m
}
Path: /api/transcript, Session: true, Public: true
‚úÖ Request received
üìå Video URL: https://www.youtube.com/watch?v=eXFItikqw8c
üìå Video ID: eXFItikqw8c
üìÇ Script Path: C:\Users\gaura\Desktop\dyp\DevClash-Ascend\scripts\get_transcript.py
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 1993ms
üìÑ stdout: "hey everyone welcome to simply learn's\nyoutube channel in this session we will\nlearn about arrays in data structure but\nbefore we begin make sure that you have\nsubscribed to our youtube channel and\ndon't forget to hit that bell icon to\nnever miss an update from simply learn\nnow let's get started with the agenda\nfor today's discussion\nso at first we will learn why exactly we\nneed arrays followed by that we will\nunderstand what is an array then the\ntypes of arrays next we have the\ndeclaration of arrays followed by that\nwe will learn how to initialize an array\nthen access the elements in an array\nafter that we will understand the basic\noperations that can be performed on\narrays and to wind up the session we\nhave the advantages and disadvantages of\naries at the end we'll have some key\ntakeaways i hope i made myself clear\nwith the agenda now let's begin with the\nfirst topic that is why did we actually\nneed an array\nso to understand this let's go through a\nsimple concept\nlet us imagine that we have some data\nand the data is related to students\nright so if we wanted to store the marks\nof individual students then we had to\ndeclare a variable for each of the\nstudent\nso you can see we have student 1 student\n2 student 3 4 and 5 and their individual\nscores so the score 1 is assigned to\nstudent 1 and so on with student five\nbeing assigned to score five\nso in the real time this might be a\nlittle clumsy we have here just five\nstudents so that is okay but what if we\nhad 500 students or 5 000 students right\nthat might be an issue there we have to\ncreate some 500 or 5 000 variables and\nit would be a little tough to handle\nthat right even if we wanted to apply\nsome operations collectively on all the\nvariables that might be a little tedious\nso what if we had one variable which\ncould store all the five students or 500\nstudents or 5 000 students all together\nand make it really easy for us to apply\nsome operations collectively on all the\nstudents right this sounds a little bit\nlogical\nso similarly we do have a data structure\nwhich can do that which can collectively\nstore all the data elements in it as a\nsingle variable and it will also help us\nto apply the operations which are\nlogical or mathematical on all the\nvariables and their values together as a\nwhole so that is the purpose why we had\ncreated arrays that is the purpose why\nwe needed arrays\nso far we have understood what was the\nnecessity for arrays now we will\nunderstand what exactly are arrays\nso basically an array is a linear data\nstructure that stores the elements in a\nsequential manner one after the other\nand when you declare an array the\nvariables will be stored one besides the\nother that is adjacent to each other in\na sequential order now let us understand\nhow the array is represented by the\ncompiler\nnow the next part that is the memory\nrepresentation of aries\nnow let us imagine that we have declared\nan array which stores character type\ndata and another important point to\nremember about r is when you declare an\narray it stores only a single data type\ntyped elements only for example here we\nhave declared a character type array\nright so we cannot store integer type\ndata or flow type data in it we only\nhave to save character type array or\ncharacter type elements in this\nparticular array\nso now let us imagine that we have\ncreated an array which is of character\ndata type and these are the elements\nwhich are a r r a y now how does the\ncompiler represent it in the form of\nmemory\nso when you create an array\nthese are formed that is the index\nvalues and the address so basically\ncompiler will select a block of memory\nand it has addresses to that block and\nit can be anything right here we have 11\n12 13 14 and 15 and in real time it\nmight be a thousand one thousand two\nthousand three thousand four thousand\nfive the main motto is assign a\nsequential block of memory and this is\nthe array and the elements are a r r a y\nand this particular one which is the\nlast one is the index of the array that\nis the position of the array for user so\nusing this index you can access the\nelements in the array more on that in\nthe accessing part\nso let us imagine that we wanted to\naccess the element r so how to access it\nwe might not know the address right in\nthat instance we will use the index this\nis for our reference so we will tell i\nwant the element from array index number\n2 and then we'll have the arr\nelement so in the practical form this is\nhow we use the index\nnow let's continue with the lower bound\nand the upper bound so the first initial\nlocation is called as the lower bound\nand at the last or the max value of the\narray is called as the upper bound now\nlet us jump into the next topic where we\nwill understand the different types of\narrays\nso these are the different types of\narrays\ndimensional arrays and\nmulti-dimensional arrays\nin multi-dimensional arrays we have two\nmore types that is two-dimensional\narrays and three-dimensional arrays\nso how are arrays different from each\nother\nright so the first one we'll deal with\nthe first one that is the one\ndimensional array now how is an array\ndeclared as one dimensional for that we\nneed subscript\nso one dimensional array requires only\none subscript to specify the number of\nelements in an array so how is it\nactually represented so here you can see\nan example right on my screen\nso here is how a one-dimensional array\nlooks like so here we have the data type\nthat is integer data type and marks is\nthe name of the array and this is the\nsize of the array and here the elements\nwill be stored and here it is the index\nvalue of the array and remember the\nindex value of array always starts from\nzero in the previous example that was\nonly for basic understanding so i just\nstarted that with one\nin the practical way the array index\nalways starts from zero\nso followed by the one dimensional array\nwe will deal with the multi-dimensional\narrays in that we have the following\nthe first one is the two-dimensional\narray and the second one is the\nthree-dimensional array\nin the multi-dimensional arrays we\nrequire more than one subscript in the\nprevious example we had one dimensional\narray so the subscript is just one that\nis 10 columns\nright so we just had one single row and\n10 different columns but in the\nmulti-dimensional arrays we need\nmultiple rows and multiple columns\nright so we need two subscripts for two\ndimensional array and more than two\nsubscripts for three dimensional arrays\nso first we have the two dimensional\narrays\nthe 2d array is organized in the form of\na matrix which can be represented as a\ncollection of rows and columns so here\nis the example\nas you can see on my screen we have\nthree columns and three rows\nand we have two subscripts that define\nthe number of rows and the number of\ncolumns and the elements in each and\nevery row so the one two three confines\nthe first row four five six confines the\nsecond row and seven eight nine will be\nthe third row\nnow similarly we have three dimensional\narrays a 3d array is a collection of 2d\narrays which consists of three\nsubscripts block size row size and\ncolumn size\nso here we have an example for that\nso we have three subscripts that is the\nfirst one is block size the second one\nis the row number and the third one is\ncolumn number\nso this happens to be the first block\nthis happens to be the second block and\nthis is how a three-dimensional array\ncan be represented\nnow we have the next stage where we will\nunderstand how to declare the arrays and\nthe syntax is right on my screen you\nneed to specify the data type of the\narray which is integer float or\ncharacter any selection which you make\nfollowed by that you need to select an\narray name for your array and inside\nthat you need to declare the array size\nand sometimes you can also eliminate the\narray size if you wanted to you know\nhave a dynamic array\nand here is an example for that\nyou have integer data type name of the\narray is example and the array size is\n6.\nso the compiler will allocate continuous\nmemory block of six integer type blocks\nso\nthese are the few more methods to\ninitialize the array\nso here you can see integer data type\narray name is a element size is 5 and we\nhave 5 elements\nthe method 2 is remember i have said you\ncan eliminate the size of the array\nright so here you can use this way as\nwell integer data type array name a and\nno size here and you can directly\ndeclare the elements\nand the method third so here you have\nthe name of the array size of the array\nand you are allocating the elements to\nthe individual memory locations there is\nalso another method to initialize array\nand method4 is using a forum you can\njust initialize a for loop and the i\nvalue will be stored in the array\nlocations starting from 0.\nnow let us understand how to access the\nelements in an array\nso to access the elements in an array\nyou need to specify the name of the\narray and memory block where you have\nthat element that you want to access so\nhere we have an example\nwhich is integer data type name of the\narray is xyz and the element we wanted\nto access is 5. so here we have an\nexample that is integer type array array\nname is xyz and it has the size 5\nand now we wanted to access the first\nelement in an array that can be done\nusing the first index that is x y z of 0\nindex that is the first element and\naccessing the second element and so on\nxyz of one will be the second element\nxyz of two three four will be the third\nand fourth and fifth elements\nnow let us understand some basic\noperations that can be performed on the\narray elements\nso the following are the operations that\ncan be performed on the array elements\nthat is the traversal insertion deletion\nsearching and sorting\nnow let us get into practical mode and\ntry to execute some examples based on\ntraversal of the array insertion of an\nelement into the array deletion of an\nelement from an array searching for an\nelement in an array and sorting the\ncomplete array so at first we'll carry\nout the traversal operation so here we\nhave an array that is a of 5 and the\nelements are 1 2 3 4 and 5. now we're\ngoing to use a for loop to traverse\nthrough this array and print all the\nelements sequentially now let us execute\nthis code and see the output\nso as you can see the code got\nsuccessfully executed and the elements\nthat is 1 2 3 4 and 5 from the array a\nare printed sequentially\nnow moving ahead we'll try to execute\nsome examples based on insertion of\nelement into the array so on my screen\nyou can see an example for inserting an\nelement into the array at the starting\nposition of the array now let us try to\nexecute this code and see the output\ndon't worry about the codes these code\ndocuments will be attached in the\ndescription box below and you will be\nable to have an access to it and run\nthese codes in your personal laptop and\nget a better learning experience\nnow you can see the code got\nsuccessfully executed and now it is\nasking for the size of the array let's\ndeclare it as 5\nand now let's enter the elements into\nthe array\nnow it is asking for the element to be\nadded at the beginning of the array now\nwe have 2 3 4 5 and 6 existing in the\narray let's add the first element one\nand there you go the resultant array is\none two three four five and six the\nelement which we added at the ending\nwhich is one is supposed to be in the\nfirst or the beginning part of the array\nwhich is here at at the first index\nlocation as planned\nnow let's get started with another\nexample on the insertion\nnow let's try to insert an element at\nany given location as per the user's\nchoice\nso as you can see we have a program on\nmy screen and running this program must\nhelp us to insert an element into any\ngiven location of the array\nnow let's try to quickly run this\nprogram and see the output\nso there you go enter the elements into\nthe array\nlet's enter one three\nlet's try to run this program and see\nthe output\nso there you go the program got\nsuccessfully executed and now the output\nis asking for us to tell it the number\nof elements in an array now let's say\nfour elements\nso now let's enter the four elements\n1\n3\n4 5 and 6.\nokay\nso the four elements which is one three\nfour five are been inserted now it is\nasking for the location where you want\nto insert the element now let us insert\nit in the second location\nnow let us set the value as 2 and there\nyou go the resultant array is 1 2 3 4\nand 5 and the element which is 2 was\nsupposed to be added in the second\nlocation and it has been successfully\nadded now let's try to execute another\nexample based on insertion where you\nwill try to insert the element in the\nlast position\nnow this program on my screen will help\nus to add an element at the end of the\narray let's quickly run this program\nnow it is asking for us to enter the\nfive elements of the array let's enter\nthat\nnow it is asking to enter the element to\nbe inserted now let us enter the element\nand this element should be added at the\nend location as discussed the resultant\narray is 1 3 5 7 9 and 11.\nnow let's continue with the deletion\noperation\nnow the program on my screen is an\nexample for deleting an element from the\nbeginning position of an array now the\nprogram got successfully executed and\nit's asking for us to enter the size of\nthe array let's enter the size as five\nand now let's enter the elements of the\narray that is one\ntwo three four and five\nnow the element from the first location\nthat is one has been deleted and the\nresultant array is 2 3 4 and 5. now the\ncode on my screen will help you to\neliminate the element from the ending\nlocation of an array now let's try to\nquickly run this program and see the\nobject\nso you can see that the program is\nsuccessfully run and it is asking for us\nto enter the size of the array let's\nenter 4.\nnow let's enter the elements of the\narray that is 1 2 3 and 4.\nnow after eliminating the last element\nfrom the array that is 4 we have the\nresultant array that is 1 2 and 3.\nnow a little homework for you guys let's\ntry to execute an example for deleting\nan element from any location of an array\nthis will be a homework now don't worry\ntry on your own and if you don't get\nthat you can refer to the comment\nsections below where you have the code\ndocument attached in the description box\nand you can refer to it\nnow let's continue with the next\noperation where we will search for a\ngiven element in the array\nso you can see that on my screen we have\nan example which will help us to sort\nthe elements in an array let's quickly\nrun this\nso there you go the program got\nsuccessfully executed and now it's\nasking for the array size let's enter\nfive\nand now let's enter the elements in a\nrandom order\n[Music]\nnow the resultant array should be sorted\nso there you go the array after being\nsort is it's 2 3 5 14 and 21 so there\nyou go the array got sorted so now we\nhave finished our practical session\nlet's have a quick overview again\nso traversal in an area is a process of\nvisiting each element once traversal can\nbe done by various means that is by\ncounting the array elements printing the\nvalues sorted in the arrays\nand sum of all elements present in the\narray and many more\nso this is how we traverse our array\nfrom the first location to the last\nlocation again the insertion operation\ninsertion in an array is a process of\nincluding one or more elements in an\narray and it can be done at the\nbeginning at the end and at any given\nindex of an array which we executed for\nall the three types of examples\nnow next we have the deletion operation\nso deletion operation or deletion of an\nelement is a process of removing a\ndesired element and reorganizing the\narray and it can be done at the\nbeginning at the end and at any given\nindex so we have executed the example\nfor at the beginning and at the end and\nthe homework was at the given index\ndon't worry if you don't figure it out\nyou can always refer to the example\ndocument which is mentioned in the\ndescription box below\nnow the search operation searching is a\nprocess of finding a given value in the\nlist of values and it decides whether\nthe search key is present in the array\nor not and we have executed an example\non that\nand again the sort operation where we\nwill sort the given array\nif the given array is not in the default\norder or in a given order that is\nascending or descending then we can sort\nthe order of the array by the user's\nchoice given it is ascending order or\ndescending order\nnow in the next section of the tutorial\nwe will discuss the advantages of using\narrays\nso the first one is array stores\nmultiple elements of same data type with\nsame name\nnext one elements in an array can be\naccessed randomly using just the index\nnumber\narray memory is predefined so there is\nno extra memory loss\narray avoids memory overflow and finally\n2d arrays can represent the tabular form\nof data in a very efficient way\nnow let us also have a look on some of\nthe disadvantages of using arrays\nthe first one the number of elements in\nan array should be always predefined so\nthere is no chance that you can add some\nextra element in the last moment\narray is static in nature so its size\ncannot be varied after declaration\nwhat if consider that you wanted to\nstore 10 student data in one array and\nyou end up having just seven students so\nthe remaining three is a waste right so\nyou are wasting memory there that's the\nproblem and insertion and deletion\noperations in an array is quite\ndifficult as the array stores elements\nin a continuous form\nand finally allocating excess memory\nthen required mainly to memory wastage\nnow we have the final key takeaways of\nthe arrays\nso we discussed why do we need arrays\nthen we discussed what are r is followed\nby that we discussed types of arrays\nnext we had a declaration of arrays\naccessing elements from an array\ninitializing the arrays and basic\noperations on array that is the\npractical demo part and finally we have\ndiscussed the advantages and\ndisadvantages of using an array now with\nthat we have come to an end of this\ntutorial and if you have any queries\nregarding the topics covered in this\ntutorial or if you need the quotes that\nare executed in this particular tutorial\nthen please feel free to ask them down\nin the comment section below and our\nteam of experts will be happy to resolve\nall your queries until next time thank\nyou stay safe and keep learning\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here"

 POST /api/transcript [32m200[39m in 3687ms
Path: /api/generateNotes, Session: true, Public: true
Starting generateResponseFromTranscript...
Prompt generated: Generate notes for the following transcript in points: hey everyone welcome to simply learn's
youtube channel in this session we will
learn about arrays in data structure but
before we begin make sure that you have
subscribed to our youtube channel and
don't forget to hit that bell icon to
never miss an update from simply learn
now let's get started with the agenda
for today's discussion
so at first we will learn why exactly we
need arrays followed by that we will
understand what is an array then the
types of arrays next we have the
declaration of arrays followed by that
we will learn how to initialize an array
then access the elements in an array
after that we will understand the basic
operations that can be performed on
arrays and to wind up the session we
have the advantages and disadvantages of
aries at the end we'll have some key
takeaways i hope i made myself clear
with the agenda now let's begin with the
first topic that is why did we actually
need an array
so to understand this let's go through a
simple concept
let us imagine that we have some data
and the data is related to students
right so if we wanted to store the marks
of individual students then we had to
declare a variable for each of the
student
so you can see we have student 1 student
2 student 3 4 and 5 and their individual
scores so the score 1 is assigned to
student 1 and so on with student five
being assigned to score five
so in the real time this might be a
little clumsy we have here just five
students so that is okay but what if we
had 500 students or 5 000 students right
that might be an issue there we have to
create some 500 or 5 000 variables and
it would be a little tough to handle
that right even if we wanted to apply
some operations collectively on all the
variables that might be a little tedious
so what if we had one variable which
could store all the five students or 500
students or 5 000 students all together
and make it really easy for us to apply
some operations collectively on all the
students right this sounds a little bit
logical
so similarly we do have a data structure
which can do that which can collectively
store all the data elements in it as a
single variable and it will also help us
to apply the operations which are
logical or mathematical on all the
variables and their values together as a
whole so that is the purpose why we had
created arrays that is the purpose why
we needed arrays
so far we have understood what was the
necessity for arrays now we will
understand what exactly are arrays
so basically an array is a linear data
structure that stores the elements in a
sequential manner one after the other
and when you declare an array the
variables will be stored one besides the
other that is adjacent to each other in
a sequential order now let us understand
how the array is represented by the
compiler
now the next part that is the memory
representation of aries
now let us imagine that we have declared
an array which stores character type
data and another important point to
remember about r is when you declare an
array it stores only a single data type
typed elements only for example here we
have declared a character type array
right so we cannot store integer type
data or flow type data in it we only
have to save character type array or
character type elements in this
particular array
so now let us imagine that we have
created an array which is of character
data type and these are the elements
which are a r r a y now how does the
compiler represent it in the form of
memory
so when you create an array
these are formed that is the index
values and the address so basically
compiler will select a block of memory
and it has addresses to that block and
it can be anything right here we have 11
12 13 14 and 15 and in real time it
might be a thousand one thousand two
thousand three thousand four thousand
five the main motto is assign a
sequential block of memory and this is
the array and the elements are a r r a y
and this particular one which is the
last one is the index of the array that
is the position of the array for user so
using this index you can access the
elements in the array more on that in
the accessing part
so let us imagine that we wanted to
access the element r so how to access it
we might not know the address right in
that instance we will use the index this
is for our reference so we will tell i
want the element from array index number
2 and then we'll have the arr
element so in the practical form this is
how we use the index
now let's continue with the lower bound
and the upper bound so the first initial
location is called as the lower bound
and at the last or the max value of the
array is called as the upper bound now
let us jump into the next topic where we
will understand the different types of
arrays
so these are the different types of
arrays
dimensional arrays and
multi-dimensional arrays
in multi-dimensional arrays we have two
more types that is two-dimensional
arrays and three-dimensional arrays
so how are arrays different from each
other
right so the first one we'll deal with
the first one that is the one
dimensional array now how is an array
declared as one dimensional for that we
need subscript
so one dimensional array requires only
one subscript to specify the number of
elements in an array so how is it
actually represented so here you can see
an example right on my screen
so here is how a one-dimensional array
looks like so here we have the data type
that is integer data type and marks is
the name of the array and this is the
size of the array and here the elements
will be stored and here it is the index
value of the array and remember the
index value of array always starts from
zero in the previous example that was
only for basic understanding so i just
started that with one
in the practical way the array index
always starts from zero
so followed by the one dimensional array
we will deal with the multi-dimensional
arrays in that we have the following
the first one is the two-dimensional
array and the second one is the
three-dimensional array
in the multi-dimensional arrays we
require more than one subscript in the
previous example we had one dimensional
array so the subscript is just one that
is 10 columns
right so we just had one single row and
10 different columns but in the
multi-dimensional arrays we need
multiple rows and multiple columns
right so we need two subscripts for two
dimensional array and more than two
subscripts for three dimensional arrays
so first we have the two dimensional
arrays
the 2d array is organized in the form of
a matrix which can be represented as a
collection of rows and columns so here
is the example
as you can see on my screen we have
three columns and three rows
and we have two subscripts that define
the number of rows and the number of
columns and the elements in each and
every row so the one two three confines
the first row four five six confines the
second row and seven eight nine will be
the third row
now similarly we have three dimensional
arrays a 3d array is a collection of 2d
arrays which consists of three
subscripts block size row size and
column size
so here we have an example for that
so we have three subscripts that is the
first one is block size the second one
is the row number and the third one is
column number
so this happens to be the first block
this happens to be the second block and
this is how a three-dimensional array
can be represented
now we have the next stage where we will
understand how to declare the arrays and
the syntax is right on my screen you
need to specify the data type of the
array which is integer float or
character any selection which you make
followed by that you need to select an
array name for your array and inside
that you need to declare the array size
and sometimes you can also eliminate the
array size if you wanted to you know
have a dynamic array
and here is an example for that
you have integer data type name of the
array is example and the array size is
6.
so the compiler will allocate continuous
memory block of six integer type blocks
so
these are the few more methods to
initialize the array
so here you can see integer data type
array name is a element size is 5 and we
have 5 elements
the method 2 is remember i have said you
can eliminate the size of the array
right so here you can use this way as
well integer data type array name a and
no size here and you can directly
declare the elements
and the method third so here you have
the name of the array size of the array
and you are allocating the elements to
the individual memory locations there is
also another method to initialize array
and method4 is using a forum you can
just initialize a for loop and the i
value will be stored in the array
locations starting from 0.
now let us understand how to access the
elements in an array
so to access the elements in an array
you need to specify the name of the
array and memory block where you have
that element that you want to access so
here we have an example
which is integer data type name of the
array is xyz and the element we wanted
to access is 5. so here we have an
example that is integer type array array
name is xyz and it has the size 5
and now we wanted to access the first
element in an array that can be done
using the first index that is x y z of 0
index that is the first element and
accessing the second element and so on
xyz of one will be the second element
xyz of two three four will be the third
and fourth and fifth elements
now let us understand some basic
operations that can be performed on the
array elements
so the following are the operations that
can be performed on the array elements
that is the traversal insertion deletion
searching and sorting
now let us get into practical mode and
try to execute some examples based on
traversal of the array insertion of an
element into the array deletion of an
element from an array searching for an
element in an array and sorting the
complete array so at first we'll carry
out the traversal operation so here we
have an array that is a of 5 and the
elements are 1 2 3 4 and 5. now we're
going to use a for loop to traverse
through this array and print all the
elements sequentially now let us execute
this code and see the output
so as you can see the code got
successfully executed and the elements
that is 1 2 3 4 and 5 from the array a
are printed sequentially
now moving ahead we'll try to execute
some examples based on insertion of
element into the array so on my screen
you can see an example for inserting an
element into the array at the starting
position of the array now let us try to
execute this code and see the output
don't worry about the codes these code
documents will be attached in the
description box below and you will be
able to have an access to it and run
these codes in your personal laptop and
get a better learning experience
now you can see the code got
successfully executed and now it is
asking for the size of the array let's
declare it as 5
and now let's enter the elements into
the array
now it is asking for the element to be
added at the beginning of the array now
we have 2 3 4 5 and 6 existing in the
array let's add the first element one
and there you go the resultant array is
one two three four five and six the
element which we added at the ending
which is one is supposed to be in the
first or the beginning part of the array
which is here at at the first index
location as planned
now let's get started with another
example on the insertion
now let's try to insert an element at
any given location as per the user's
choice
so as you can see we have a program on
my screen and running this program must
help us to insert an element into any
given location of the array
now let's try to quickly run this
program and see the output
so there you go enter the elements into
the array
let's enter one three
let's try to run this program and see
the output
so there you go the program got
successfully executed and now the output
is asking for us to tell it the number
of elements in an array now let's say
four elements
so now let's enter the four elements
1
3
4 5 and 6.
okay
so the four elements which is one three
four five are been inserted now it is
asking for the location where you want
to insert the element now let us insert
it in the second location
now let us set the value as 2 and there
you go the resultant array is 1 2 3 4
and 5 and the element which is 2 was
supposed to be added in the second
location and it has been successfully
added now let's try to execute another
example based on insertion where you
will try to insert the element in the
last position
now this program on my screen will help
us to add an element at the end of the
array let's quickly run this program
now it is asking for us to enter the
five elements of the array let's enter
that
now it is asking to enter the element to
be inserted now let us enter the element
and this element should be added at the
end location as discussed the resultant
array is 1 3 5 7 9 and 11.
now let's continue with the deletion
operation
now the program on my screen is an
example for deleting an element from the
beginning position of an array now the
program got successfully executed and
it's asking for us to enter the size of
the array let's enter the size as five
and now let's enter the elements of the
array that is one
two three four and five
now the element from the first location
that is one has been deleted and the
resultant array is 2 3 4 and 5. now the
code on my screen will help you to
eliminate the element from the ending
location of an array now let's try to
quickly run this program and see the
object
so you can see that the program is
successfully run and it is asking for us
to enter the size of the array let's
enter 4.
now let's enter the elements of the
array that is 1 2 3 and 4.
now after eliminating the last element
from the array that is 4 we have the
resultant array that is 1 2 and 3.
now a little homework for you guys let's
try to execute an example for deleting
an element from any location of an array
this will be a homework now don't worry
try on your own and if you don't get
that you can refer to the comment
sections below where you have the code
document attached in the description box
and you can refer to it
now let's continue with the next
operation where we will search for a
given element in the array
so you can see that on my screen we have
an example which will help us to sort
the elements in an array let's quickly
run this
so there you go the program got
successfully executed and now it's
asking for the array size let's enter
five
and now let's enter the elements in a
random order
[Music]
now the resultant array should be sorted
so there you go the array after being
sort is it's 2 3 5 14 and 21 so there
you go the array got sorted so now we
have finished our practical session
let's have a quick overview again
so traversal in an area is a process of
visiting each element once traversal can
be done by various means that is by
counting the array elements printing the
values sorted in the arrays
and sum of all elements present in the
array and many more
so this is how we traverse our array
from the first location to the last
location again the insertion operation
insertion in an array is a process of
including one or more elements in an
array and it can be done at the
beginning at the end and at any given
index of an array which we executed for
all the three types of examples
now next we have the deletion operation
so deletion operation or deletion of an
element is a process of removing a
desired element and reorganizing the
array and it can be done at the
beginning at the end and at any given
index so we have executed the example
for at the beginning and at the end and
the homework was at the given index
don't worry if you don't figure it out
you can always refer to the example
document which is mentioned in the
description box below
now the search operation searching is a
process of finding a given value in the
list of values and it decides whether
the search key is present in the array
or not and we have executed an example
on that
and again the sort operation where we
will sort the given array
if the given array is not in the default
order or in a given order that is
ascending or descending then we can sort
the order of the array by the user's
choice given it is ascending order or
descending order
now in the next section of the tutorial
we will discuss the advantages of using
arrays
so the first one is array stores
multiple elements of same data type with
same name
next one elements in an array can be
accessed randomly using just the index
number
array memory is predefined so there is
no extra memory loss
array avoids memory overflow and finally
2d arrays can represent the tabular form
of data in a very efficient way
now let us also have a look on some of
the disadvantages of using arrays
the first one the number of elements in
an array should be always predefined so
there is no chance that you can add some
extra element in the last moment
array is static in nature so its size
cannot be varied after declaration
what if consider that you wanted to
store 10 student data in one array and
you end up having just seven students so
the remaining three is a waste right so
you are wasting memory there that's the
problem and insertion and deletion
operations in an array is quite
difficult as the array stores elements
in a continuous form
and finally allocating excess memory
then required mainly to memory wastage
now we have the final key takeaways of
the arrays
so we discussed why do we need arrays
then we discussed what are r is followed
by that we discussed types of arrays
next we had a declaration of arrays
accessing elements from an array
initializing the arrays and basic
operations on array that is the
practical demo part and finally we have
discussed the advantages and
disadvantages of using an array now with
that we have come to an end of this
tutorial and if you have any queries
regarding the topics covered in this
tutorial or if you need the quotes that
are executed in this particular tutorial
then please feel free to ask them down
in the comment section below and our
team of experts will be happy to resolve
all your queries until next time thank
you stay safe and keep learning
hi there if you like this video
subscribe to the simply learn youtube
channel and click here to watch similar
videos turn it up and get certified
click here
Sending prompt to Gemini...
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:42.008Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 1213ms
üìÑ stdout: "hey everyone welcome to simply learn's\nyoutube channel in this session we will\nlearn about arrays in data structure but\nbefore we begin make sure that you have\nsubscribed to our youtube channel and\ndon't forget to hit that bell icon to\nnever miss an update from simply learn\nnow let's get started with the agenda\nfor today's discussion\nso at first we will learn why exactly we\nneed arrays followed by that we will\nunderstand what is an array then the\ntypes of arrays next we have the\ndeclaration of arrays followed by that\nwe will learn how to initialize an array\nthen access the elements in an array\nafter that we will understand the basic\noperations that can be performed on\narrays and to wind up the session we\nhave the advantages and disadvantages of\naries at the end we'll have some key\ntakeaways i hope i made myself clear\nwith the agenda now let's begin with the\nfirst topic that is why did we actually\nneed an array\nso to understand this let's go through a\nsimple concept\nlet us imagine that we have some data\nand the data is related to students\nright so if we wanted to store the marks\nof individual students then we had to\ndeclare a variable for each of the\nstudent\nso you can see we have student 1 student\n2 student 3 4 and 5 and their individual\nscores so the score 1 is assigned to\nstudent 1 and so on with student five\nbeing assigned to score five\nso in the real time this might be a\nlittle clumsy we have here just five\nstudents so that is okay but what if we\nhad 500 students or 5 000 students right\nthat might be an issue there we have to\ncreate some 500 or 5 000 variables and\nit would be a little tough to handle\nthat right even if we wanted to apply\nsome operations collectively on all the\nvariables that might be a little tedious\nso what if we had one variable which\ncould store all the five students or 500\nstudents or 5 000 students all together\nand make it really easy for us to apply\nsome operations collectively on all the\nstudents right this sounds a little bit\nlogical\nso similarly we do have a data structure\nwhich can do that which can collectively\nstore all the data elements in it as a\nsingle variable and it will also help us\nto apply the operations which are\nlogical or mathematical on all the\nvariables and their values together as a\nwhole so that is the purpose why we had\ncreated arrays that is the purpose why\nwe needed arrays\nso far we have understood what was the\nnecessity for arrays now we will\nunderstand what exactly are arrays\nso basically an array is a linear data\nstructure that stores the elements in a\nsequential manner one after the other\nand when you declare an array the\nvariables will be stored one besides the\nother that is adjacent to each other in\na sequential order now let us understand\nhow the array is represented by the\ncompiler\nnow the next part that is the memory\nrepresentation of aries\nnow let us imagine that we have declared\nan array which stores character type\ndata and another important point to\nremember about r is when you declare an\narray it stores only a single data type\ntyped elements only for example here we\nhave declared a character type array\nright so we cannot store integer type\ndata or flow type data in it we only\nhave to save character type array or\ncharacter type elements in this\nparticular array\nso now let us imagine that we have\ncreated an array which is of character\ndata type and these are the elements\nwhich are a r r a y now how does the\ncompiler represent it in the form of\nmemory\nso when you create an array\nthese are formed that is the index\nvalues and the address so basically\ncompiler will select a block of memory\nand it has addresses to that block and\nit can be anything right here we have 11\n12 13 14 and 15 and in real time it\nmight be a thousand one thousand two\nthousand three thousand four thousand\nfive the main motto is assign a\nsequential block of memory and this is\nthe array and the elements are a r r a y\nand this particular one which is the\nlast one is the index of the array that\nis the position of the array for user so\nusing this index you can access the\nelements in the array more on that in\nthe accessing part\nso let us imagine that we wanted to\naccess the element r so how to access it\nwe might not know the address right in\nthat instance we will use the index this\nis for our reference so we will tell i\nwant the element from array index number\n2 and then we'll have the arr\nelement so in the practical form this is\nhow we use the index\nnow let's continue with the lower bound\nand the upper bound so the first initial\nlocation is called as the lower bound\nand at the last or the max value of the\narray is called as the upper bound now\nlet us jump into the next topic where we\nwill understand the different types of\narrays\nso these are the different types of\narrays\ndimensional arrays and\nmulti-dimensional arrays\nin multi-dimensional arrays we have two\nmore types that is two-dimensional\narrays and three-dimensional arrays\nso how are arrays different from each\nother\nright so the first one we'll deal with\nthe first one that is the one\ndimensional array now how is an array\ndeclared as one dimensional for that we\nneed subscript\nso one dimensional array requires only\none subscript to specify the number of\nelements in an array so how is it\nactually represented so here you can see\nan example right on my screen\nso here is how a one-dimensional array\nlooks like so here we have the data type\nthat is integer data type and marks is\nthe name of the array and this is the\nsize of the array and here the elements\nwill be stored and here it is the index\nvalue of the array and remember the\nindex value of array always starts from\nzero in the previous example that was\nonly for basic understanding so i just\nstarted that with one\nin the practical way the array index\nalways starts from zero\nso followed by the one dimensional array\nwe will deal with the multi-dimensional\narrays in that we have the following\nthe first one is the two-dimensional\narray and the second one is the\nthree-dimensional array\nin the multi-dimensional arrays we\nrequire more than one subscript in the\nprevious example we had one dimensional\narray so the subscript is just one that\nis 10 columns\nright so we just had one single row and\n10 different columns but in the\nmulti-dimensional arrays we need\nmultiple rows and multiple columns\nright so we need two subscripts for two\ndimensional array and more than two\nsubscripts for three dimensional arrays\nso first we have the two dimensional\narrays\nthe 2d array is organized in the form of\na matrix which can be represented as a\ncollection of rows and columns so here\nis the example\nas you can see on my screen we have\nthree columns and three rows\nand we have two subscripts that define\nthe number of rows and the number of\ncolumns and the elements in each and\nevery row so the one two three confines\nthe first row four five six confines the\nsecond row and seven eight nine will be\nthe third row\nnow similarly we have three dimensional\narrays a 3d array is a collection of 2d\narrays which consists of three\nsubscripts block size row size and\ncolumn size\nso here we have an example for that\nso we have three subscripts that is the\nfirst one is block size the second one\nis the row number and the third one is\ncolumn number\nso this happens to be the first block\nthis happens to be the second block and\nthis is how a three-dimensional array\ncan be represented\nnow we have the next stage where we will\nunderstand how to declare the arrays and\nthe syntax is right on my screen you\nneed to specify the data type of the\narray which is integer float or\ncharacter any selection which you make\nfollowed by that you need to select an\narray name for your array and inside\nthat you need to declare the array size\nand sometimes you can also eliminate the\narray size if you wanted to you know\nhave a dynamic array\nand here is an example for that\nyou have integer data type name of the\narray is example and the array size is\n6.\nso the compiler will allocate continuous\nmemory block of six integer type blocks\nso\nthese are the few more methods to\ninitialize the array\nso here you can see integer data type\narray name is a element size is 5 and we\nhave 5 elements\nthe method 2 is remember i have said you\ncan eliminate the size of the array\nright so here you can use this way as\nwell integer data type array name a and\nno size here and you can directly\ndeclare the elements\nand the method third so here you have\nthe name of the array size of the array\nand you are allocating the elements to\nthe individual memory locations there is\nalso another method to initialize array\nand method4 is using a forum you can\njust initialize a for loop and the i\nvalue will be stored in the array\nlocations starting from 0.\nnow let us understand how to access the\nelements in an array\nso to access the elements in an array\nyou need to specify the name of the\narray and memory block where you have\nthat element that you want to access so\nhere we have an example\nwhich is integer data type name of the\narray is xyz and the element we wanted\nto access is 5. so here we have an\nexample that is integer type array array\nname is xyz and it has the size 5\nand now we wanted to access the first\nelement in an array that can be done\nusing the first index that is x y z of 0\nindex that is the first element and\naccessing the second element and so on\nxyz of one will be the second element\nxyz of two three four will be the third\nand fourth and fifth elements\nnow let us understand some basic\noperations that can be performed on the\narray elements\nso the following are the operations that\ncan be performed on the array elements\nthat is the traversal insertion deletion\nsearching and sorting\nnow let us get into practical mode and\ntry to execute some examples based on\ntraversal of the array insertion of an\nelement into the array deletion of an\nelement from an array searching for an\nelement in an array and sorting the\ncomplete array so at first we'll carry\nout the traversal operation so here we\nhave an array that is a of 5 and the\nelements are 1 2 3 4 and 5. now we're\ngoing to use a for loop to traverse\nthrough this array and print all the\nelements sequentially now let us execute\nthis code and see the output\nso as you can see the code got\nsuccessfully executed and the elements\nthat is 1 2 3 4 and 5 from the array a\nare printed sequentially\nnow moving ahead we'll try to execute\nsome examples based on insertion of\nelement into the array so on my screen\nyou can see an example for inserting an\nelement into the array at the starting\nposition of the array now let us try to\nexecute this code and see the output\ndon't worry about the codes these code\ndocuments will be attached in the\ndescription box below and you will be\nable to have an access to it and run\nthese codes in your personal laptop and\nget a better learning experience\nnow you can see the code got\nsuccessfully executed and now it is\nasking for the size of the array let's\ndeclare it as 5\nand now let's enter the elements into\nthe array\nnow it is asking for the element to be\nadded at the beginning of the array now\nwe have 2 3 4 5 and 6 existing in the\narray let's add the first element one\nand there you go the resultant array is\none two three four five and six the\nelement which we added at the ending\nwhich is one is supposed to be in the\nfirst or the beginning part of the array\nwhich is here at at the first index\nlocation as planned\nnow let's get started with another\nexample on the insertion\nnow let's try to insert an element at\nany given location as per the user's\nchoice\nso as you can see we have a program on\nmy screen and running this program must\nhelp us to insert an element into any\ngiven location of the array\nnow let's try to quickly run this\nprogram and see the output\nso there you go enter the elements into\nthe array\nlet's enter one three\nlet's try to run this program and see\nthe output\nso there you go the program got\nsuccessfully executed and now the output\nis asking for us to tell it the number\nof elements in an array now let's say\nfour elements\nso now let's enter the four elements\n1\n3\n4 5 and 6.\nokay\nso the four elements which is one three\nfour five are been inserted now it is\nasking for the location where you want\nto insert the element now let us insert\nit in the second location\nnow let us set the value as 2 and there\nyou go the resultant array is 1 2 3 4\nand 5 and the element which is 2 was\nsupposed to be added in the second\nlocation and it has been successfully\nadded now let's try to execute another\nexample based on insertion where you\nwill try to insert the element in the\nlast position\nnow this program on my screen will help\nus to add an element at the end of the\narray let's quickly run this program\nnow it is asking for us to enter the\nfive elements of the array let's enter\nthat\nnow it is asking to enter the element to\nbe inserted now let us enter the element\nand this element should be added at the\nend location as discussed the resultant\narray is 1 3 5 7 9 and 11.\nnow let's continue with the deletion\noperation\nnow the program on my screen is an\nexample for deleting an element from the\nbeginning position of an array now the\nprogram got successfully executed and\nit's asking for us to enter the size of\nthe array let's enter the size as five\nand now let's enter the elements of the\narray that is one\ntwo three four and five\nnow the element from the first location\nthat is one has been deleted and the\nresultant array is 2 3 4 and 5. now the\ncode on my screen will help you to\neliminate the element from the ending\nlocation of an array now let's try to\nquickly run this program and see the\nobject\nso you can see that the program is\nsuccessfully run and it is asking for us\nto enter the size of the array let's\nenter 4.\nnow let's enter the elements of the\narray that is 1 2 3 and 4.\nnow after eliminating the last element\nfrom the array that is 4 we have the\nresultant array that is 1 2 and 3.\nnow a little homework for you guys let's\ntry to execute an example for deleting\nan element from any location of an array\nthis will be a homework now don't worry\ntry on your own and if you don't get\nthat you can refer to the comment\nsections below where you have the code\ndocument attached in the description box\nand you can refer to it\nnow let's continue with the next\noperation where we will search for a\ngiven element in the array\nso you can see that on my screen we have\nan example which will help us to sort\nthe elements in an array let's quickly\nrun this\nso there you go the program got\nsuccessfully executed and now it's\nasking for the array size let's enter\nfive\nand now let's enter the elements in a\nrandom order\n[Music]\nnow the resultant array should be sorted\nso there you go the array after being\nsort is it's 2 3 5 14 and 21 so there\nyou go the array got sorted so now we\nhave finished our practical session\nlet's have a quick overview again\nso traversal in an area is a process of\nvisiting each element once traversal can\nbe done by various means that is by\ncounting the array elements printing the\nvalues sorted in the arrays\nand sum of all elements present in the\narray and many more\nso this is how we traverse our array\nfrom the first location to the last\nlocation again the insertion operation\ninsertion in an array is a process of\nincluding one or more elements in an\narray and it can be done at the\nbeginning at the end and at any given\nindex of an array which we executed for\nall the three types of examples\nnow next we have the deletion operation\nso deletion operation or deletion of an\nelement is a process of removing a\ndesired element and reorganizing the\narray and it can be done at the\nbeginning at the end and at any given\nindex so we have executed the example\nfor at the beginning and at the end and\nthe homework was at the given index\ndon't worry if you don't figure it out\nyou can always refer to the example\ndocument which is mentioned in the\ndescription box below\nnow the search operation searching is a\nprocess of finding a given value in the\nlist of values and it decides whether\nthe search key is present in the array\nor not and we have executed an example\non that\nand again the sort operation where we\nwill sort the given array\nif the given array is not in the default\norder or in a given order that is\nascending or descending then we can sort\nthe order of the array by the user's\nchoice given it is ascending order or\ndescending order\nnow in the next section of the tutorial\nwe will discuss the advantages of using\narrays\nso the first one is array stores\nmultiple elements of same data type with\nsame name\nnext one elements in an array can be\naccessed randomly using just the index\nnumber\narray memory is predefined so there is\nno extra memory loss\narray avoids memory overflow and finally\n2d arrays can represent the tabular form\nof data in a very efficient way\nnow let us also have a look on some of\nthe disadvantages of using arrays\nthe first one the number of elements in\nan array should be always predefined so\nthere is no chance that you can add some\nextra element in the last moment\narray is static in nature so its size\ncannot be varied after declaration\nwhat if consider that you wanted to\nstore 10 student data in one array and\nyou end up having just seven students so\nthe remaining three is a waste right so\nyou are wasting memory there that's the\nproblem and insertion and deletion\noperations in an array is quite\ndifficult as the array stores elements\nin a continuous form\nand finally allocating excess memory\nthen required mainly to memory wastage\nnow we have the final key takeaways of\nthe arrays\nso we discussed why do we need arrays\nthen we discussed what are r is followed\nby that we discussed types of arrays\nnext we had a declaration of arrays\naccessing elements from an array\ninitializing the arrays and basic\noperations on array that is the\npractical demo part and finally we have\ndiscussed the advantages and\ndisadvantages of using an array now with\nthat we have come to an end of this\ntutorial and if you have any queries\nregarding the topics covered in this\ntutorial or if you need the quotes that\nare executed in this particular tutorial\nthen please feel free to ask them down\nin the comment section below and our\nteam of experts will be happy to resolve\nall your queries until next time thank\nyou stay safe and keep learning\nhi there if you like this video\nsubscribe to the simply learn youtube\nchannel and click here to watch similar\nvideos turn it up and get certified\nclick here"

 POST /api/transcript [32m200[39m in 3488ms
Path: /api/generate-quiz, Session: true, Public: true
 [37m[1m‚óã[22m[39m Compiling /api/generate-quiz ...
 [32m[1m‚úì[22m[39m Compiled /api/generate-quiz in 713ms (3655 modules)
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:45.315Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 1025ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Generated Quiz Questions backend: [
  {
    question: [32m'According to the transcript, what is the primary reason for needing arrays?'[39m,
    options: [
      [32m'To store different data types in a single variable.'[39m,
      [32m'To store elements in a non-sequential manner.'[39m,
      [32m'To store multiple data elements collectively as a single variable and apply operations logically or mathematically.'[39m,
      [32m'To avoid using variables at all.'[39m
    ],
    correct_answer: [32m'To store multiple data elements collectively as a single variable and apply operations logically or mathematically.'[39m,
    topic: [32m'Why We Need Arrays'[39m,
    explanation: [32m'The transcript states that arrays were created to store all data elements collectively in a single variable, making it easier to apply operations logically or mathematically to all variables and their values together.'[39m
  },
  {
    question: [32m'What data type(s) can a character type array store according to the transcript?'[39m,
    options: [
      [32m'Integer type data'[39m,
      [32m'Float type data'[39m,
      [32m'Only character type data'[39m,
      [32m'All data types'[39m
    ],
    correct_answer: [32m'Only character type data'[39m,
    topic: [32m'Types of Arrays'[39m,
    explanation: [32m'The transcript specifically states that when you declare a character type array, you can only save character type elements in that particular array. It cannot store integer or float type data.'[39m
  },
  {
    question: [32m"According to the transcript, what is 'traversal' in the context of array operations?"[39m,
    options: [
      [32m'Inserting elements into the array.'[39m,
      [32m'Deleting elements from the array.'[39m,
      [32m'Visiting each element in the array once.'[39m,
      [32m'Sorting the array elements.'[39m
    ],
    correct_answer: [32m'Visiting each element in the array once.'[39m,
    topic: [32m'Basic Operations on Arrays'[39m,
    explanation: [32m'The transcript defines traversal as the process of visiting each element once, which can involve actions like counting, printing, sorting, or summing the elements.'[39m
  }
]
 POST /api/generate-quiz [32m200[39m in 5254ms
 ‚îÇ [37mPOST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent 200 in 4493ms [33m(cache skip)[37m[39m
 ‚îÇ ‚îÇ [90mCache skipped reason: ([37mauto no cache[90m)[39m
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:47.851Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 302ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Gemini response received.
Extracted response object.
Extracted response text: Okay, here are the notes from the provided transcript, broken down into points for clarity:

**I. Introduction**

*   Welcome to Simply Learn's YouTube Channel.
*   Topic: Arrays in Data Structures.
*   Call to action: Subscribe and hit the bell icon for updates.

**II. Agenda**

*   Why we need arrays.
*   What is an array.
*   Types of arrays (one-dimensional, multi-dimensional: two-dimensional and three-dimensional).
*   Declaration of arrays.
*   Initialization of arrays.
*   Accessing elements in an array.
*   Basic operations on arrays (traversal, insertion, deletion, searching, sorting).
*   Advantages and disadvantages of arrays.
*   Key takeaways.

**III. Why We Need Arrays**

*   Problem: Storing individual student marks requires declaring a variable for *each* student.  Becomes unwieldy with large numbers of students (500, 5000).
*   Difficult to apply collective operations.
*   Solution: Arrays allow storing multiple related data elements (e.g., student marks) in a single variable.
*   Arrays facilitate collective operations (logical or mathematical) on all elements.

**IV. What is an Array?**

*   A linear data structure.
*   Stores elements sequentially (one after the other).
*   Elements are stored adjacently in memory.
*   Stores only a single data type.

**V. Memory Representation of Arrays**

*   Example: Character array (stores only character data).
*   Compiler representation:
    *   Sequential block of memory assigned.
    *   Each memory location has an address.
    *   Index: position of the element in the array (for user reference, starts at 0).
    *   Accessing elements: Use the index (e.g., `array[2]` to access the third element).
*   Lower Bound: First index location of the array.
*   Upper Bound: Last index location of the array.

**VI. Types of Arrays**

*   One-Dimensional Arrays: Require one subscript to specify the number of elements.
    *   Example: `int marks[10];` (integer array named 'marks' with size 10). Index starts from 0.
*   Multi-Dimensional Arrays: Require more than one subscript.
    *   Two-Dimensional Arrays: Represented as a matrix (rows and columns). Need two subscripts (rows, columns).
        *   Example: A matrix with 3 rows and 3 columns.
    *   Three-Dimensional Arrays: Collection of 2D arrays. Need three subscripts (block size, row size, column size).

**VII. Declaration of Arrays**

*   Syntax: `dataType arrayName[arraySize];`
*   `dataType`: int, float, char, etc.
*   Can sometimes eliminate the `arraySize` for dynamic arrays.
*   Example: `int example[6];`

**VIII. Initialization of Arrays**

*   Method 1: `int a[5] = {1, 2, 3, 4, 5};`
*   Method 2: `int a[] = {1, 2, 3, 4, 5};` (size is inferred from the number of elements).
*   Method 3: `int a[5]; a[0] = 1; a[1] = 2; ...` (initialize elements individually).
*   Method 4: Use a `for` loop to initialize.

**IX. Accessing Elements in an Array**

*   Specify the array name and index: `arrayName[index]`.
*   Example: `int xyz[5];`
    *   `xyz[0]` accesses the first element.
    *   `xyz[1]` accesses the second element, and so on.

**X. Basic Operations on Arrays**

*   Traversal: Visiting each element of the array.
*   Insertion: Adding elements to the array (beginning, end, or specific location).
*   Deletion: Removing elements from the array (beginning, end, or specific location).
*   Searching: Finding a specific element in the array.
*   Sorting: Arranging elements in a specific order (ascending or descending).

**XI. Practical Demo (Summary)**

*   Demonstration of each operation (traversal, insertion [at the beginning, at given location, at the end], deletion [at the beginning, at the end]).
*   Example code is mentioned to be provided in the description.

**XII. Overview of Operations**

*   Traversal: Visiting each element (e.g., counting, printing, summing).
*   Insertion: Including elements (beginning, end, index).
*   Deletion: Removing elements (beginning, end, index).
*   Searching: Finding if a value is present.
*   Sorting: Arranging elements.

**XIII. Advantages of Using Arrays**

*   Store multiple elements of the *same* data type under one name.
*   Random access to elements using the index.
*   Predefined memory allocation (no extra memory loss).
*   Avoids memory overflow.
*   2D arrays efficiently represent tabular data.

**XIV. Disadvantages of Using Arrays**

*   Number of elements must be predefined.
*   Static in nature: size cannot be changed after declaration.
*   Potential for memory wastage if the array is not fully utilized.
*   Insertion and deletion can be difficult because of the need to maintain a continuous sequence.
*   Excess memory allocation can lead to memory wastage.

**XV. Key Takeaways (Recap)**

*   Reviewed the agenda topics: Need for arrays, Definition, Types, Declaration, Accessing Elements, Initializing, Operations, Advantages, Disadvantages.

**XVI. Conclusion**

*   Questions are welcome in the comment section.
*   Thank you, stay safe, and keep learning.

This should give you a comprehensive breakdown of the key points from the transcript.  Good luck!

generateResponseFromTranscript completed successfully.
Response from generateResponseFromTranscript: Okay, here are the notes from the provided transcript, broken down into points for clarity:

**I. Introduction**

*   Welcome to Simply Learn's YouTube Channel.
*   Topic: Arrays in Data Structures.
*   Call to action: Subscribe and hit the bell icon for updates.

**II. Agenda**

*   Why we need arrays.
*   What is an array.
*   Types of arrays (one-dimensional, multi-dimensional: two-dimensional and three-dimensional).
*   Declaration of arrays.
*   Initialization of arrays.
*   Accessing elements in an array.
*   Basic operations on arrays (traversal, insertion, deletion, searching, sorting).
*   Advantages and disadvantages of arrays.
*   Key takeaways.

**III. Why We Need Arrays**

*   Problem: Storing individual student marks requires declaring a variable for *each* student.  Becomes unwieldy with large numbers of students (500, 5000).
*   Difficult to apply collective operations.
*   Solution: Arrays allow storing multiple related data elements (e.g., student marks) in a single variable.
*   Arrays facilitate collective operations (logical or mathematical) on all elements.

**IV. What is an Array?**

*   A linear data structure.
*   Stores elements sequentially (one after the other).
*   Elements are stored adjacently in memory.
*   Stores only a single data type.

**V. Memory Representation of Arrays**

*   Example: Character array (stores only character data).
*   Compiler representation:
    *   Sequential block of memory assigned.
    *   Each memory location has an address.
    *   Index: position of the element in the array (for user reference, starts at 0).
    *   Accessing elements: Use the index (e.g., `array[2]` to access the third element).
*   Lower Bound: First index location of the array.
*   Upper Bound: Last index location of the array.

**VI. Types of Arrays**

*   One-Dimensional Arrays: Require one subscript to specify the number of elements.
    *   Example: `int marks[10];` (integer array named 'marks' with size 10). Index starts from 0.
*   Multi-Dimensional Arrays: Require more than one subscript.
    *   Two-Dimensional Arrays: Represented as a matrix (rows and columns). Need two subscripts (rows, columns).
        *   Example: A matrix with 3 rows and 3 columns.
    *   Three-Dimensional Arrays: Collection of 2D arrays. Need three subscripts (block size, row size, column size).

**VII. Declaration of Arrays**

*   Syntax: `dataType arrayName[arraySize];`
*   `dataType`: int, float, char, etc.
*   Can sometimes eliminate the `arraySize` for dynamic arrays.
*   Example: `int example[6];`

**VIII. Initialization of Arrays**

*   Method 1: `int a[5] = {1, 2, 3, 4, 5};`
*   Method 2: `int a[] = {1, 2, 3, 4, 5};` (size is inferred from the number of elements).
*   Method 3: `int a[5]; a[0] = 1; a[1] = 2; ...` (initialize elements individually).
*   Method 4: Use a `for` loop to initialize.

**IX. Accessing Elements in an Array**

*   Specify the array name and index: `arrayName[index]`.
*   Example: `int xyz[5];`
    *   `xyz[0]` accesses the first element.
    *   `xyz[1]` accesses the second element, and so on.

**X. Basic Operations on Arrays**

*   Traversal: Visiting each element of the array.
*   Insertion: Adding elements to the array (beginning, end, or specific location).
*   Deletion: Removing elements from the array (beginning, end, or specific location).
*   Searching: Finding a specific element in the array.
*   Sorting: Arranging elements in a specific order (ascending or descending).

**XI. Practical Demo (Summary)**

*   Demonstration of each operation (traversal, insertion [at the beginning, at given location, at the end], deletion [at the beginning, at the end]).
*   Example code is mentioned to be provided in the description.

**XII. Overview of Operations**

*   Traversal: Visiting each element (e.g., counting, printing, summing).
*   Insertion: Including elements (beginning, end, index).
*   Deletion: Removing elements (beginning, end, index).
*   Searching: Finding if a value is present.
*   Sorting: Arranging elements.

**XIII. Advantages of Using Arrays**

*   Store multiple elements of the *same* data type under one name.
*   Random access to elements using the index.
*   Predefined memory allocation (no extra memory loss).
*   Avoids memory overflow.
*   2D arrays efficiently represent tabular data.

**XIV. Disadvantages of Using Arrays**

*   Number of elements must be predefined.
*   Static in nature: size cannot be changed after declaration.
*   Potential for memory wastage if the array is not fully utilized.
*   Insertion and deletion can be difficult because of the need to maintain a continuous sequence.
*   Excess memory allocation can lead to memory wastage.

**XV. Key Takeaways (Recap)**

*   Reviewed the agenda topics: Need for arrays, Definition, Types, Declaration, Accessing Elements, Initializing, Operations, Advantages, Disadvantages.

**XVI. Conclusion**

*   Questions are welcome in the comment section.
*   Thank you, stay safe, and keep learning.

This should give you a comprehensive breakdown of the key points from the transcript.  Good luck!

 POST /api/generateNotes [32m200[39m in 9858ms
 ‚îÇ [37mPOST https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent 200 in 9840ms [33m(cache skip)[37m[39m
 ‚îÇ ‚îÇ [90mCache skipped reason: ([37mauto no cache[90m)[39m
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:51.158Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 2708ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:55.573Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 851ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:35:57.933Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 264ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:36:00.544Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 639ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3707[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 678ms
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:36:03.921Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 3220ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:36:09.891Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 2784ms
Path: /api/roadmaps/update-time, Session: true, Public: true
Using existing MongoDB connection
‚úÖ Updated time in MongoDB: {
  _id: new ObjectId([32m'67f0fc5e398a17c1c071d17c'[39m),
  date: [32m'2025-04-05'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  __v: [33m0[39m,
  time: [33m3707[39m
}
 POST /api/roadmaps/update-time [32m200[39m in 670ms
Path: /api/roadmaps/progress, Session: true, Public: true
API route called: /api/roadmaps/progress
Received progress data: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  userId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: []
}
Connecting to MongoDB...
Using existing MongoDB connection
Connected to MongoDB successfully
Found roadmap to update: Roadmap 1bce0c30-3b07-4ac4-b72e-b5c57a2f6779
Saving user progress: {
  roadmapId: [32m'1bce0c30-3b07-4ac4-b72e-b5c57a2f6779'[39m,
  supabaseUserId: [32m'bf812cb3-c61a-4a4f-b6d2-a58c16c2b6b9'[39m,
  completedVideos: [
    [32m'https://www.youtube.com/watch?v=bum_19loj9A'[39m,
    [32m'https://www.youtube.com/watch?v=pmN9ExDf3yQ'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME'[39m,
    [32m'https://www.youtube.com/watch?v=ouipSd_5ivQ'[39m,
    [32m'https://www.youtube.com/watch?v=XMUe3zFhM5c'[39m,
    [32m'https://www.youtube.com/watch?v=5T0SiJocPCI'[39m,
    [32m'https://www.youtube.com/watch?v=jOMxKsUd6e0'[39m,
    [32m'https://www.youtube.com/watch?v=0OK-kbu9Cwo'[39m,
    [32m'https://www.youtube.com/watch?v=8yjkWGRlUmY'[39m,
    [32m'https://www.youtube.com/watch?v=p5TDnxAYAZY'[39m,
    [32m'https://www.youtube.com/watch?v=0IAPZzGSbME&q=Arrays%20HackerRank%20challenge%20beginner%20walkthrough'[39m,
    [32m'https://www.youtube.com/watch?v=SFEROgwxicA'[39m,
    [32m'https://www.youtube.com/watch?v=oz9cEqFynHU'[39m,
    [32m'https://www.youtube.com/watch?v=__vX2sjlpXU'[39m,
    [32m'https://www.youtube.com/watch?v=9TlHvipP5yA'[39m,
    [32m'https://www.youtube.com/watch?v=FPu9Uld7W-E'[39m,
    [32m'https://www.youtube.com/watch?v=cQWr9DFE1ww'[39m,
    [32m'https://www.youtube.com/watch?v=r51TRDECIw4'[39m,
    [32m'https://www.youtube.com/watch?v=BLDI3tYtIq8'[39m,
    [32m'https://www.youtube.com/watch?v=oQ5sAfT_3V4'[39m,
    [32m'https://www.youtube.com/watch?v=AT14lCXuMKI'[39m,
    [32m'https://www.youtube.com/watch?v=eXFItikqw8c'[39m
  ],
  completedTopics: [],
  lastUpdated: [35m2025-04-05T18:36:14.472Z[39m
}
Successfully saved user progress
 POST /api/roadmaps/progress [32m200[39m in 1015ms
